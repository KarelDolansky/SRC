
cv04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a120  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b4  0800a3b4  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b4  0800a3b4  0000b3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3bc  0800a3bc  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  0000b3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20040000  0800a3c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002278  20040060  0800a424  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200422d8  0800a424  0000c2d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028472  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be9  00000000  00000000  00034502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002018  00000000  00000000  000390f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018e2  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004aa7  00000000  00000000  0003c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000246cf  00000000  00000000  00041491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001270be  00000000  00000000  00065b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cc1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d5c  00000000  00000000  0018cc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001959c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040060 	.word	0x20040060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a2c8 	.word	0x0800a2c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040064 	.word	0x20040064
 80001fc:	0800a2c8 	.word	0x0800a2c8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fea7 	bl	8001246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f836 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa76 	bl	80009ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f924 	bl	800074c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f970 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 fa42 	bl	8000990 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 800050c:	f000 fa08 	bl	8000920 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000510:	f000 f87e 	bl	8000610 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000514:	f000 f9b4 	bl	8000880 <MX_TIM3_Init>
  MX_DAC1_Init();
 8000518:	f000 f8e4 	bl	80006e4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <main+0x60>)
 800051e:	f004 fd8f 	bl	8005040 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000522:	f006 fb39 	bl	8006b98 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8000526:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <main+0x64>)
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f006 fc10 	bl	8006d50 <osSemaphoreNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <main+0x68>)
 8000534:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Filtrace */
  FiltraceHandle = osThreadNew(StartFiltrace, NULL, &Filtrace_attributes);
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <main+0x6c>)
 8000538:	2100      	movs	r1, #0
 800053a:	4809      	ldr	r0, [pc, #36]	@ (8000560 <main+0x70>)
 800053c:	f006 fb76 	bl	8006c2c <osThreadNew>
 8000540:	4603      	mov	r3, r0
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <main+0x74>)
 8000544:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000546:	f006 fb4b 	bl	8006be0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	bf00      	nop
 800054c:	e7fd      	b.n	800054a <main+0x5a>
 800054e:	bf00      	nop
 8000550:	20040224 	.word	0x20040224
 8000554:	0800a334 	.word	0x0800a334
 8000558:	200407a4 	.word	0x200407a4
 800055c:	0800a310 	.word	0x0800a310
 8000560:	08000b65 	.word	0x08000b65
 8000564:	200407a0 	.word	0x200407a0

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	@ 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	@ 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f009 fdbe 	bl	800a0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800058a:	2000      	movs	r0, #0
 800058c:	f003 f81a 	bl	80035c4 <HAL_PWREx_ControlVoltageScaling>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000596:	f000 fb1b 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800059a:	2322      	movs	r3, #34	@ 0x22
 800059c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2340      	movs	r3, #64	@ 0x40
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005b8:	231e      	movs	r3, #30
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f8bd 	bl	800374c <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005d8:	f000 fafa 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2105      	movs	r1, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fcc2 	bl	8003f80 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000602:	f000 fae5 	bl	8000bd0 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	@ 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000626:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000628:	4a2c      	ldr	r2, [pc, #176]	@ (80006dc <MX_ADC1_Init+0xcc>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 800062e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000648:	2204      	movs	r2, #4
 800064a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 800064e:	2200      	movs	r2, #0
 8000650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000654:	2200      	movs	r2, #0
 8000656:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000668:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800066c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000670:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 800068e:	f001 f84b 	bl	8001728 <HAL_ADC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000698:	f000 fa9a 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_ADC1_Init+0xd0>)
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a0:	2306      	movs	r3, #6
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a8:	237f      	movs	r3, #127	@ 0x7f
 80006aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ac:	2304      	movs	r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 80006ba:	f001 fc05 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80006c4:	f000 fa84 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006c8:	217f      	movs	r1, #127	@ 0x7f
 80006ca:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <MX_ADC1_Init+0xc8>)
 80006cc:	f002 f90a 	bl	80028e4 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20040080 	.word	0x20040080
 80006dc:	50040000 	.word	0x50040000
 80006e0:	21800100 	.word	0x21800100

080006e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2228      	movs	r2, #40	@ 0x28
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f009 fd01 	bl	800a0f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_DAC1_Init+0x60>)
 80006f8:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <MX_DAC1_Init+0x64>)
 80006fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006fc:	4811      	ldr	r0, [pc, #68]	@ (8000744 <MX_DAC1_Init+0x60>)
 80006fe:	f002 fa65 	bl	8002bcc <HAL_DAC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000708:	f000 fa62 	bl	8000bd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <MX_DAC1_Init+0x60>)
 800072c:	f002 fad4 	bl	8002cd8 <HAL_DAC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8000736:	f000 fa4b 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200400e8 	.word	0x200400e8
 8000748:	40007400 	.word	0x40007400

0800074c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000752:	4a23      	ldr	r2, [pc, #140]	@ (80007e0 <MX_LPUART1_UART_Init+0x94>)
 8000754:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000758:	4a22      	ldr	r2, [pc, #136]	@ (80007e4 <MX_LPUART1_UART_Init+0x98>)
 800075a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 800075e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000762:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000794:	4811      	ldr	r0, [pc, #68]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000796:	f005 f8a1 	bl	80058dc <HAL_UART_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80007a0:	f000 fa16 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 80007a8:	f005 fe3c 	bl	8006424 <HAL_UARTEx_SetTxFifoThreshold>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007b2:	f000 fa0d 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4808      	ldr	r0, [pc, #32]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 80007ba:	f005 fe71 	bl	80064a0 <HAL_UARTEx_SetRxFifoThreshold>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 fa04 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 80007ca:	f005 fdf2 	bl	80063b2 <HAL_UARTEx_DisableFifoMode>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f9fc 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200400fc 	.word	0x200400fc
 80007e0:	40008000 	.word	0x40008000
 80007e4:	00033324 	.word	0x00033324

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <MX_USART3_UART_Init+0x94>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000832:	f005 f853 	bl	80058dc <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 f9c8 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000844:	f005 fdee 	bl	8006424 <HAL_UARTEx_SetTxFifoThreshold>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800084e:	f000 f9bf 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000856:	f005 fe23 	bl	80064a0 <HAL_UARTEx_SetRxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 f9b6 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000866:	f005 fda4 	bl	80063b2 <HAL_UARTEx_DisableFifoMode>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f9ae 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20040190 	.word	0x20040190
 800087c:	40004800 	.word	0x40004800

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800089e:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008a0:	4a1e      	ldr	r2, [pc, #120]	@ (800091c <MX_TIM3_Init+0x9c>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000-1;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008a6:	f241 726f 	movw	r2, #5999	@ 0x176f
 80008aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c6:	4814      	ldr	r0, [pc, #80]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008c8:	f004 fb62 	bl	8004f90 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008d2:	f000 f97d 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_TIM3_Init+0x98>)
 80008e4:	f004 fd23 	bl	800532e <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008ee:	f000 f96f 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008f2:	2320      	movs	r3, #32
 80008f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_TIM3_Init+0x98>)
 8000900:	f004 ff46 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800090a:	f000 f961 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20040224 	.word	0x20040224
 800091c:	40000400 	.word	0x40000400

08000920 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_TIM7_Init+0x68>)
 8000932:	4a16      	ldr	r2, [pc, #88]	@ (800098c <MX_TIM7_Init+0x6c>)
 8000934:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6000-1;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_TIM7_Init+0x68>)
 8000938:	f241 726f 	movw	r2, #5999	@ 0x176f
 800093c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_TIM7_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8000944:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_TIM7_Init+0x68>)
 8000946:	f242 720f 	movw	r2, #9999	@ 0x270f
 800094a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_TIM7_Init+0x68>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000952:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_TIM7_Init+0x68>)
 8000954:	f004 fb1c 	bl	8004f90 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800095e:	f000 f937 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000962:	2320      	movs	r3, #32
 8000964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <MX_TIM7_Init+0x68>)
 8000970:	f004 ff0e 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 f929 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20040270 	.word	0x20040270
 800098c:	40001400 	.word	0x40001400

08000990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800099a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2206      	movs	r2, #6
 80009a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	f002 fca3 	bl	800331e <HAL_PCD_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8f7 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200402bc 	.word	0x200402bc

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	@ 0x30
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4a4b      	ldr	r2, [pc, #300]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4b49      	ldr	r3, [pc, #292]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a45      	ldr	r2, [pc, #276]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a3f      	ldr	r2, [pc, #252]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a39      	ldr	r2, [pc, #228]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b37      	ldr	r3, [pc, #220]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a33      	ldr	r2, [pc, #204]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <MX_GPIO_Init+0x148>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a92:	f002 fe4b 	bl	800372c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000a9c:	4826      	ldr	r0, [pc, #152]	@ (8000b38 <MX_GPIO_Init+0x14c>)
 8000a9e:	f002 fc03 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	@ 0x40
 8000aa6:	4825      	ldr	r0, [pc, #148]	@ (8000b3c <MX_GPIO_Init+0x150>)
 8000aa8:	f002 fbfe 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481f      	ldr	r0, [pc, #124]	@ (8000b40 <MX_GPIO_Init+0x154>)
 8000ac4:	f002 fa5e 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ac8:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4815      	ldr	r0, [pc, #84]	@ (8000b38 <MX_GPIO_Init+0x14c>)
 8000ae2:	f002 fa4f 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4810      	ldr	r0, [pc, #64]	@ (8000b3c <MX_GPIO_Init+0x150>)
 8000afa:	f002 fa43 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <MX_GPIO_Init+0x150>)
 8000b16:	f002 fa35 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	2028      	movs	r0, #40	@ 0x28
 8000b20:	f002 f82a 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b24:	2028      	movs	r0, #40	@ 0x28
 8000b26:	f002 f843 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	48001800 	.word	0x48001800
 8000b40:	48000800 	.word	0x48000800

08000b44 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(Semaphore1Handle);
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 f9d9 	bl	8006f08 <osSemaphoreRelease>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200407a4 	.word	0x200407a4

08000b64 <StartFiltrace>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFiltrace */
void StartFiltrace(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  ADCData = HAL_ADC_GetValue(&hadc1);
 8000b6c:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <StartFiltrace+0x28>)
 8000b6e:	f000 ffd5 	bl	8001b1c <HAL_ADC_GetValue>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <StartFiltrace+0x2c>)
 8000b76:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <StartFiltrace+0x30>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	4618      	mov	r0, r3
 8000b82:	f006 f96f 	bl	8006e64 <osSemaphoreAcquire>
	  ADCData = HAL_ADC_GetValue(&hadc1);
 8000b86:	bf00      	nop
 8000b88:	e7f0      	b.n	8000b6c <StartFiltrace+0x8>
 8000b8a:	bf00      	nop
 8000b8c:	20040080 	.word	0x20040080
 8000b90:	2004007c 	.word	0x2004007c
 8000b94:	200407a4 	.word	0x200407a4

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fb65 	bl	8001278 <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */
	if (htim==&htim3){
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d102      	bne.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0x24>
		  HAL_ADC_Start_IT(&hadc1);
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bb8:	f000 fefc 	bl	80019b4 <HAL_ADC_Start_IT>
	}
  /* USER CODE END Callback 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40001000 	.word	0x40001000
 8000bc8:	20040224 	.word	0x20040224
 8000bcc:	20040080 	.word	0x20040080

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f001 ffad 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2294      	movs	r2, #148	@ 0x94
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f009 fa53 	bl	800a0f8 <memset>
  if(hadc->Instance==ADC1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a2b      	ldr	r2, [pc, #172]	@ (8000d04 <HAL_ADC_MspInit+0xd8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d14f      	bne.n	8000cfc <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000c72:	230c      	movs	r3, #12
 8000c74:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fc67 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c98:	f7ff ff9a 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca0:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000ca2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb8:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce8:	f002 f94c 	bl	8002f84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2012      	movs	r0, #18
 8000cf2:	f001 ff41 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cf6:	2012      	movs	r0, #18
 8000cf8:	f001 ff5a 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	37b8      	adds	r7, #184	@ 0xb8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	50040000 	.word	0x50040000
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a19      	ldr	r2, [pc, #100]	@ (8000d90 <HAL_DAC_MspInit+0x84>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12c      	bne.n	8000d88 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f002 f906 	bl	8002f84 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	2036      	movs	r0, #54	@ 0x36
 8000d7e:	f001 fefb 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d82:	2036      	movs	r0, #54	@ 0x36
 8000d84:	f001 ff14 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40007400 	.word	0x40007400
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b0      	sub	sp, #192	@ 0xc0
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	2294      	movs	r2, #148	@ 0x94
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f009 f99d 	bl	800a0f8 <memset>
  if(huart->Instance==LPUART1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a43      	ldr	r2, [pc, #268]	@ (8000ed0 <HAL_UART_MspInit+0x138>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d13e      	bne.n	8000e46 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fbc3 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de0:	f7ff fef6 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000de4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000de8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000df0:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfc:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e00:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e08:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000e14:	f002 fc8a 	bl	800372c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e18:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e32:	2308      	movs	r3, #8
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4826      	ldr	r0, [pc, #152]	@ (8000ed8 <HAL_UART_MspInit+0x140>)
 8000e40:	f002 f8a0 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e44:	e040      	b.n	8000ec8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a24      	ldr	r2, [pc, #144]	@ (8000edc <HAL_UART_MspInit+0x144>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13b      	bne.n	8000ec8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e50:	2304      	movs	r3, #4
 8000e52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 fb7f 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e68:	f7ff feb2 	bl	8000bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e70:	4a18      	ldr	r2, [pc, #96]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <HAL_UART_MspInit+0x13c>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <HAL_UART_MspInit+0x148>)
 8000ec4:	f002 f85e 	bl	8002f84 <HAL_GPIO_Init>
}
 8000ec8:	bf00      	nop
 8000eca:	37c0      	adds	r7, #192	@ 0xc0
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40008000 	.word	0x40008000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48001800 	.word	0x48001800
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	48000c00 	.word	0x48000c00

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <HAL_TIM_Base_MspInit+0x5c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10c      	bne.n	8000f10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <HAL_TIM_Base_MspInit+0x60>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <HAL_TIM_Base_MspInit+0x60>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <HAL_TIM_Base_MspInit+0x60>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f0e:	e010      	b.n	8000f32 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0c      	ldr	r2, [pc, #48]	@ (8000f48 <HAL_TIM_Base_MspInit+0x64>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10b      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_TIM_Base_MspInit+0x60>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <HAL_TIM_Base_MspInit+0x60>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <HAL_TIM_Base_MspInit+0x60>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40000400 	.word	0x40000400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40001400 	.word	0x40001400

08000f4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0b0      	sub	sp, #192	@ 0xc0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	2294      	movs	r2, #148	@ 0x94
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 f8c3 	bl	800a0f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f7a:	d16c      	bne.n	8001056 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fae7 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f98:	f7ff fe1a 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f001 ffd1 	bl	8002f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001000:	f001 ffc0 	bl	8002f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 800100a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800100e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101c:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d114      	bne.n	8001052 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	4a0c      	ldr	r2, [pc, #48]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001032:	6593      	str	r3, [r2, #88]	@ 0x58
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001040:	f002 fb64 	bl	800370c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <HAL_PCD_MspInit+0x114>)
 800104a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800104e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001050:	e001      	b.n	8001056 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001052:	f002 fb5b 	bl	800370c <HAL_PWREx_EnableVddUSB>
}
 8001056:	bf00      	nop
 8001058:	37c0      	adds	r7, #192	@ 0xc0
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	@ 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <HAL_InitTick+0xe0>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <HAL_InitTick+0xe0>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	6593      	str	r3, [r2, #88]	@ 0x58
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_InitTick+0xe0>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800108a:	f107 0210 	add.w	r2, r7, #16
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f971 	bl	800437c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010a4:	f003 f93e 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 80010a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80010aa:	e004      	b.n	80010b6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ac:	f003 f93a 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 80010b0:	4603      	mov	r3, r0
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b8:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_InitTick+0xe4>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0c9b      	lsrs	r3, r3, #18
 80010c0:	3b01      	subs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010c4:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_InitTick+0xe8>)
 80010c6:	4a22      	ldr	r2, [pc, #136]	@ (8001150 <HAL_InitTick+0xec>)
 80010c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_InitTick+0xe8>)
 80010cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010d2:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <HAL_InitTick+0xe8>)
 80010d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_InitTick+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_InitTick+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_InitTick+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <HAL_InitTick+0xe8>)
 80010ec:	f003 ff50 	bl	8004f90 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d11b      	bne.n	8001136 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010fe:	4813      	ldr	r0, [pc, #76]	@ (800114c <HAL_InitTick+0xe8>)
 8001100:	f003 ff9e 	bl	8005040 <HAL_TIM_Base_Start_IT>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800110a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800110e:	2b00      	cmp	r3, #0
 8001110:	d111      	bne.n	8001136 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001112:	2036      	movs	r0, #54	@ 0x36
 8001114:	f001 fd4c 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	d808      	bhi.n	8001130 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800111e:	2200      	movs	r2, #0
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	2036      	movs	r0, #54	@ 0x36
 8001124:	f001 fd28 	bl	8002b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_InitTick+0xf0>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e002      	b.n	8001136 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001136:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800113a:	4618      	mov	r0, r3
 800113c:	3738      	adds	r7, #56	@ 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	431bde83 	.word	0x431bde83
 800114c:	200407a8 	.word	0x200407a8
 8001150:	40001000 	.word	0x40001000
 8001154:	20040004 	.word	0x20040004

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <ADC1_IRQHandler+0x10>)
 8001196:	f000 fcce 	bl	8001b36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20040080 	.word	0x20040080

080011a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011ac:	f002 f894 	bl	80032d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <TIM6_DAC_IRQHandler+0x14>)
 80011ba:	f003 ffb1 	bl	8005120 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <TIM6_DAC_IRQHandler+0x18>)
 80011c0:	f001 fd26 	bl	8002c10 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200407a8 	.word	0x200407a8
 80011cc:	200400e8 	.word	0x200400e8

080011d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800122c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff ffea 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	@ (8001234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <LoopForever+0xe>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	@ (8001240 <LoopForever+0x16>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f008 ffc7 	bl	800a1b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7ff f963 	bl	80004f0 <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800122c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001230:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001234:	20040060 	.word	0x20040060
  ldr r2, =_sidata
 8001238:	0800a3c4 	.word	0x0800a3c4
  ldr r2, =_sbss
 800123c:	20040060 	.word	0x20040060
  ldr r4, =_ebss
 8001240:	200422d8 	.word	0x200422d8

08001244 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <CAN1_RX0_IRQHandler>

08001246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f001 fc86 	bl	8002b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	2005      	movs	r0, #5
 8001258:	f7ff ff04 	bl	8001064 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e001      	b.n	800126c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001268:	f7ff fcb8 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800126c:	79fb      	ldrb	r3, [r7, #7]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20040008 	.word	0x20040008
 800129c:	200407f4 	.word	0x200407f4

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200407f4 	.word	0x200407f4

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20040008 	.word	0x20040008

08001300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3360      	adds	r3, #96	@ 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <LL_ADC_SetOffset+0x44>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	4313      	orrs	r3, r2
 8001398:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	03fff000 	.word	0x03fff000

080013b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3360      	adds	r3, #96	@ 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3360      	adds	r3, #96	@ 0x60
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	615a      	str	r2, [r3, #20]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3330      	adds	r3, #48	@ 0x30
 800146e:	461a      	mov	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	4413      	add	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	211f      	movs	r1, #31
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0e9b      	lsrs	r3, r3, #26
 8001496:	f003 011f 	and.w	r1, r3, #31
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014aa:	bf00      	nop
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3314      	adds	r3, #20
 80014ec:	461a      	mov	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0e5b      	lsrs	r3, r3, #25
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	0d1b      	lsrs	r3, r3, #20
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2107      	movs	r1, #7
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	0d1b      	lsrs	r3, r3, #20
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0318 	and.w	r3, r3, #24
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001558:	40d9      	lsrs	r1, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	400b      	ands	r3, r1
 800155e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001562:	431a      	orrs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	0007ffff 	.word	0x0007ffff

0800157c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800158c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6093      	str	r3, [r2, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015b4:	d101      	bne.n	80015ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001604:	d101      	bne.n	800160a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001628:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001654:	f043 0202 	orr.w	r2, r3, #2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <LL_ADC_IsEnabled+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_ADC_IsEnabled+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d101      	bne.n	80016a6 <LL_ADC_IsDisableOngoing+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_ADC_IsDisableOngoing+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016c8:	f043 0204 	orr.w	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b08      	cmp	r3, #8
 8001714:	d101      	bne.n	800171a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e129      	b.n	8001996 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fa6b 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff19 	bl	80015a0 <LL_ADC_IsDeepPowerDownEnabled>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff feff 	bl	800157c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff34 	bl	80015f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff18 	bl	80015c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001798:	4b81      	ldr	r3, [pc, #516]	@ (80019a0 <HAL_ADC_Init+0x278>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	4a81      	ldr	r2, [pc, #516]	@ (80019a4 <HAL_ADC_Init+0x27c>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	3301      	adds	r3, #1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f9      	bne.n	80017ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff16 	bl	80015f0 <LL_ADC_IsInternalRegulatorEnabled>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff76 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 80017f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80c2 	bne.w	8001984 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 80be 	bne.w	8001984 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001810:	f043 0202 	orr.w	r2, r3, #2
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff23 	bl	8001668 <LL_ADC_IsEnabled>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10b      	bne.n	8001840 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001828:	485f      	ldr	r0, [pc, #380]	@ (80019a8 <HAL_ADC_Init+0x280>)
 800182a:	f7ff ff1d 	bl	8001668 <LL_ADC_IsEnabled>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4619      	mov	r1, r3
 800183a:	485c      	ldr	r0, [pc, #368]	@ (80019ac <HAL_ADC_Init+0x284>)
 800183c:	f7ff fd60 	bl	8001300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e5b      	ldrb	r3, [r3, #25]
 8001844:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800184a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001850:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001856:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	3b01      	subs	r3, #1
 8001874:	045b      	lsls	r3, r3, #17
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	4b44      	ldr	r3, [pc, #272]	@ (80019b0 <HAL_ADC_Init+0x288>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff26 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 80018b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d140      	bne.n	8001940 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d13d      	bne.n	8001940 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7e1b      	ldrb	r3, [r3, #24]
 80018cc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ce:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018e6:	f023 0306 	bic.w	r3, r3, #6
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d118      	bne.n	8001930 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800191a:	4311      	orrs	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001920:	430a      	orrs	r2, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	e007      	b.n	8001940 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10c      	bne.n	8001962 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f023 010f 	bic.w	r1, r3, #15
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001960:	e007      	b.n	8001972 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 020f 	bic.w	r2, r2, #15
 8001970:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	659a      	str	r2, [r3, #88]	@ 0x58
 8001982:	e007      	b.n	8001994 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	f043 0210 	orr.w	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001994:	7ffb      	ldrb	r3, [r7, #31]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20040000 	.word	0x20040000
 80019a4:	053e2d63 	.word	0x053e2d63
 80019a8:	50040000 	.word	0x50040000
 80019ac:	50040300 	.word	0x50040300
 80019b0:	fff0c007 	.word	0xfff0c007

080019b4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe8b 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 80a0 	bne.w	8001b0e <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_Start_IT+0x28>
 80019d8:	2302      	movs	r3, #2
 80019da:	e09b      	b.n	8001b14 <HAL_ADC_Start_IT+0x160>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fe6b 	bl	80026c0 <ADC_Enable>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8087 	bne.w	8001b04 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1a:	f023 0206 	bic.w	r2, r3, #6
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a22:	e002      	b.n	8001a2a <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	221c      	movs	r2, #28
 8001a30:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 021c 	bic.w	r2, r2, #28
 8001a48:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d108      	bne.n	8001a64 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0208 	orr.w	r2, r2, #8
 8001a60:	605a      	str	r2, [r3, #4]
          break;
 8001a62:	e008      	b.n	8001a76 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0204 	orr.w	r2, r2, #4
 8001a72:	605a      	str	r2, [r3, #4]
          break;
 8001a74:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0210 	orr.w	r2, r2, #16
 8001a8c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02d      	beq.n	8001af8 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aa4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d110      	bne.n	8001ad6 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0220 	bic.w	r2, r2, #32
 8001ac2:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ad2:	605a      	str	r2, [r3, #4]
            break;
 8001ad4:	e010      	b.n	8001af8 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ae4:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	605a      	str	r2, [r3, #4]
            break;
 8001af6:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fdd9 	bl	80016b4 <LL_ADC_REG_StartConversion>
 8001b02:	e006      	b.n	8001b12 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001b0c:	e001      	b.n	8001b12 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b088      	sub	sp, #32
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d017      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x56>
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 ff38 	bl	80029f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0x6a>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d05e      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d059      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fc31 	bl	8001438 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03e      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d135      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d12e      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fd6b 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11a      	bne.n	8001c42 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020c 	bic.w	r2, r2, #12
 8001c1a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d112      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c40:	e00b      	b.n	8001c5a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe ff72 	bl	8000b44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	220c      	movs	r2, #12
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x146>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d072      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d06d      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fc02 	bl	80014b6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001cb2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fbbd 	bl	8001438 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cbe:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d047      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x1b2>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03f      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d13a      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf2:	2b40      	cmp	r3, #64	@ 0x40
 8001cf4:	d133      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d12e      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fcfc 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11a      	bne.n	8001d46 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d1e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d112      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d44:	e00b      	b.n	8001d5e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f043 0210 	orr.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fe20 	bl	80029a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2260      	movs	r2, #96	@ 0x60
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d011      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x264>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f886 	bl	8001e9e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d012      	beq.n	8001dca <HAL_ADC_IRQHandler+0x294>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fe06 	bl	80029cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_ADC_IRQHandler+0x2c4>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00d      	beq.n	8001dfa <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fdf8 	bl	80029e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d02a      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x324>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d025      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e008      	b.n	8001e2e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10e      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f830 	bl	8001eb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d018      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x360>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d013      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7e:	f043 0208 	orr.w	r2, r3, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fd91 	bl	80029b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0b6      	sub	sp, #216	@ 0xd8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x22>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e3d5      	b.n	8002696 <HAL_ADC_ConfigChannel+0x7ce>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fbf0 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 83ba 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d824      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	3b02      	subs	r3, #2
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d81b      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x8e>
 8001f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <HAL_ADC_ConfigChannel+0x5c>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f3d 	.word	0x08001f3d
 8001f2c:	08001f45 	.word	0x08001f45
 8001f30:	08001f4d 	.word	0x08001f4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001f34:	230c      	movs	r3, #12
 8001f36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f3a:	e010      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f42:	e00c      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001f44:	2318      	movs	r3, #24
 8001f46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f4a:	e008      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f54:	e003      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f56:	2306      	movs	r3, #6
 8001f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f5c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f6c:	f7ff fa77 	bl	800145e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fbb1 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 8001f7a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fbbd 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 8001f88:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 81bf 	bne.w	8002314 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 81ba 	bne.w	8002314 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fa8:	d10f      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7ff fa91 	bl	80014dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fa25 	bl	8001412 <LL_ADC_SetSamplingTimeCommonConfig>
 8001fc8:	e00e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f7ff fa80 	bl	80014dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fa15 	bl	8001412 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00a      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800201a:	f7ff f9a5 	bl	8001368 <LL_ADC_SetOffset>
 800201e:	e179      	b.n	8002314 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f9c2 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <HAL_ADC_ConfigChannel+0x184>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f9b7 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	0e9b      	lsrs	r3, r3, #26
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	e01e      	b.n	800208a <HAL_ADC_ConfigChannel+0x1c2>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f9ac 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800206a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800206e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002072:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e004      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800207e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x1da>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0e9b      	lsrs	r3, r3, #26
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	e018      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x20c>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80020b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80020be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e004      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80020ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d106      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f97b 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff f95f 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x24a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f954 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	0e9b      	lsrs	r3, r3, #26
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	e01e      	b.n	8002150 <HAL_ADC_ConfigChannel+0x288>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f949 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e004      	b.n	800214e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x2a0>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	e018      	b.n	800219a <HAL_ADC_ConfigChannel+0x2d2>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800217c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e004      	b.n	800219a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f918 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2102      	movs	r1, #2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8fc 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x310>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f8f1 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	f003 021f 	and.w	r2, r3, #31
 80021d6:	e01e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x34e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f8e6 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80021f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80021fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e004      	b.n	8002214 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800220a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_ADC_ConfigChannel+0x366>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	e014      	b.n	8002258 <HAL_ADC_ConfigChannel+0x390>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800223c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800223e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002242:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800224e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2102      	movs	r1, #2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f8b9 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2103      	movs	r1, #3
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f89d 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x3ce>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2103      	movs	r1, #3
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f892 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e017      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x3fe>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f887 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80022b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80022bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_ConfigChannel+0x416>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	e011      	b.n	8002302 <HAL_ADC_ConfigChannel+0x43a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80022ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80022f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80022f6:	2320      	movs	r3, #32
 80022f8:	e003      	b.n	8002302 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80022fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002302:	429a      	cmp	r2, r3
 8002304:	d106      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	2103      	movs	r1, #3
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f864 	bl	80013dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f9a5 	bl	8001668 <LL_ADC_IsEnabled>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 813f 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	461a      	mov	r2, r3
 8002334:	f7ff f8fe 	bl	8001534 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a8e      	ldr	r2, [pc, #568]	@ (8002578 <HAL_ADC_ConfigChannel+0x6b0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	f040 8130 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_ADC_ConfigChannel+0x4a4>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	3301      	adds	r3, #1
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2b09      	cmp	r3, #9
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e019      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x4d8>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800237a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800237e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2b09      	cmp	r3, #9
 8002398:	bf94      	ite	ls
 800239a:	2301      	movls	r3, #1
 800239c:	2300      	movhi	r3, #0
 800239e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d079      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x4f8>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	069b      	lsls	r3, r3, #26
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023be:	e015      	b.n	80023ec <HAL_ADC_ConfigChannel+0x524>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80023d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80023d8:	2320      	movs	r3, #32
 80023da:	e003      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80023dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_ADC_ConfigChannel+0x544>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	e017      	b.n	800243c <HAL_ADC_ConfigChannel+0x574>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800241a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800241e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e003      	b.n	8002430 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	ea42 0103 	orr.w	r1, r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x59a>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	3301      	adds	r3, #1
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	051b      	lsls	r3, r3, #20
 8002460:	e018      	b.n	8002494 <HAL_ADC_ConfigChannel+0x5cc>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002494:	430b      	orrs	r3, r1
 8002496:	e080      	b.n	800259a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x5ec>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024b2:	e015      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x618>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80024d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x638>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	e017      	b.n	8002530 <HAL_ADC_ConfigChannel+0x668>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	61bb      	str	r3, [r7, #24]
  return result;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_ADC_ConfigChannel+0x694>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	3301      	adds	r3, #1
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	3b1e      	subs	r3, #30
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800255a:	e01d      	b.n	8002598 <HAL_ADC_ConfigChannel+0x6d0>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	60fb      	str	r3, [r7, #12]
  return result;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e005      	b.n	8002584 <HAL_ADC_ConfigChannel+0x6bc>
 8002578:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	3b1e      	subs	r3, #30
 8002592:	051b      	lsls	r3, r3, #20
 8002594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002598:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe ff9c 	bl	80014dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b3d      	ldr	r3, [pc, #244]	@ (80026a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d06c      	beq.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b0:	483c      	ldr	r0, [pc, #240]	@ (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80025b2:	f7fe fecb 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 80025b6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3a      	ldr	r2, [pc, #232]	@ (80026a8 <HAL_ADC_ConfigChannel+0x7e0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d127      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d121      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	@ (80026ac <HAL_ADC_ConfigChannel+0x7e4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d157      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e2:	4619      	mov	r1, r3
 80025e4:	482f      	ldr	r0, [pc, #188]	@ (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80025e6:	f7fe fe9e 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ea:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <HAL_ADC_ConfigChannel+0x7e8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	4a30      	ldr	r2, [pc, #192]	@ (80026b4 <HAL_ADC_ConfigChannel+0x7ec>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002604:	e002      	b.n	800260c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3b01      	subs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002612:	e03a      	b.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a27      	ldr	r2, [pc, #156]	@ (80026b8 <HAL_ADC_ConfigChannel+0x7f0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d113      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800261e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10d      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1f      	ldr	r2, [pc, #124]	@ (80026ac <HAL_ADC_ConfigChannel+0x7e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d12a      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002638:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800263c:	4619      	mov	r1, r3
 800263e:	4819      	ldr	r0, [pc, #100]	@ (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002640:	f7fe fe71 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002644:	e021      	b.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <HAL_ADC_ConfigChannel+0x7f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d11c      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d116      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <HAL_ADC_ConfigChannel+0x7e4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800266a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800266e:	4619      	mov	r1, r3
 8002670:	480c      	ldr	r0, [pc, #48]	@ (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002672:	f7fe fe58 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
 8002676:	e008      	b.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002692:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002696:	4618      	mov	r0, r3
 8002698:	37d8      	adds	r7, #216	@ 0xd8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	80080000 	.word	0x80080000
 80026a4:	50040300 	.word	0x50040300
 80026a8:	c7520000 	.word	0xc7520000
 80026ac:	50040000 	.word	0x50040000
 80026b0:	20040000 	.word	0x20040000
 80026b4:	053e2d63 	.word	0x053e2d63
 80026b8:	cb840000 	.word	0xcb840000
 80026bc:	80000001 	.word	0x80000001

080026c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe ffc9 	bl	8001668 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d169      	bne.n	80027b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <ADC_Enable+0xfc>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e055      	b.n	80027b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe ff84 	bl	8001618 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002710:	482b      	ldr	r0, [pc, #172]	@ (80027c0 <ADC_Enable+0x100>)
 8002712:	f7fe fe1b 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 8002716:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002720:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <ADC_Enable+0x104>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	4a28      	ldr	r2, [pc, #160]	@ (80027c8 <ADC_Enable+0x108>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800273a:	e002      	b.n	8002742 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3b01      	subs	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002748:	f7fe fdaa 	bl	80012a0 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800274e:	e028      	b.n	80027a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe ff87 	bl	8001668 <LL_ADC_IsEnabled>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe ff57 	bl	8001618 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800276a:	f7fe fd99 	bl	80012a0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d914      	bls.n	80027a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d00d      	beq.n	80027a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e007      	b.n	80027b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d1cf      	bne.n	8002750 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	8000003f 	.word	0x8000003f
 80027c0:	50040300 	.word	0x50040300
 80027c4:	20040000 	.word	0x20040000
 80027c8:	053e2d63 	.word	0x053e2d63

080027cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe ff58 	bl	800168e <LL_ADC_IsDisableOngoing>
 80027de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe ff3f 	bl	8001668 <LL_ADC_IsEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d047      	beq.n	8002880 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d144      	bne.n	8002880 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030d 	and.w	r3, r3, #13
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10c      	bne.n	800281e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe ff19 	bl	8001640 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2203      	movs	r2, #3
 8002814:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002816:	f7fe fd43 	bl	80012a0 <HAL_GetTick>
 800281a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800281c:	e029      	b.n	8002872 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e023      	b.n	8002882 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800283a:	f7fe fd31 	bl	80012a0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d914      	bls.n	8002872 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e007      	b.n	8002882 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1dc      	bne.n	800283a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <LL_ADC_StartCalibration>:
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800289c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_IsCalibrationOnGoing>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028d0:	d101      	bne.n	80028d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_ADCEx_Calibration_Start+0x1c>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e04d      	b.n	800299c <HAL_ADCEx_Calibration_Start+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff5f 	bl	80027cc <ADC_Disable>
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d136      	bne.n	8002986 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002920:	f023 0302 	bic.w	r3, r3, #2
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ffa9 	bl	800288a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002938:	e014      	b.n	8002964 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3301      	adds	r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002946:	d30d      	bcc.n	8002964 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	f023 0312 	bic.w	r3, r3, #18
 8002950:	f043 0210 	orr.w	r2, r3, #16
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e01b      	b.n	800299c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ffa7 	bl	80028bc <LL_ADC_IsCalibrationOnGoing>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e2      	bne.n	800293a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f023 0303 	bic.w	r3, r3, #3
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	659a      	str	r2, [r3, #88]	@ 0x58
 8002984:	e005      	b.n	8002992 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	f043 0210 	orr.w	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	@ (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	@ 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff4c 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8a:	f7ff ff61 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002b8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f7ff ffb1 	bl	8002afc <NVIC_EncodePriority>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff80 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff54 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e014      	b.n	8002c08 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	791b      	ldrb	r3, [r3, #4]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f88c 	bl	8000d0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c26:	d120      	bne.n	8002c6a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c36:	d118      	bne.n	8002c6a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c62:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f82d 	bl	8002cc4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c78:	d120      	bne.n	8002cbc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c88:	d118      	bne.n	8002cbc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f043 0202 	orr.w	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ca4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f95a 	bl	8002f70 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	795b      	ldrb	r3, [r3, #5]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_DAC_ConfigChannel+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e137      	b.n	8002f64 <HAL_DAC_ConfigChannel+0x28c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	f040 8081 	bne.w	8002e0c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fac9 	bl	80012a0 <HAL_GetTick>
 8002d0e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d140      	bne.n	8002d98 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d16:	e018      	b.n	8002d4a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d18:	f7fe fac2 	bl	80012a0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d911      	bls.n	8002d4a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f043 0208 	orr.w	r2, r3, #8
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2203      	movs	r2, #3
 8002d44:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e10c      	b.n	8002f64 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1df      	bne.n	8002d18 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f7fe faad 	bl	80012b8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	69d2      	ldr	r2, [r2, #28]
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d68:	e023      	b.n	8002db2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d6a:	f7fe fa99 	bl	80012a0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d90f      	bls.n	8002d98 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0a      	bge.n	8002d98 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f043 0208 	orr.w	r2, r3, #8
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2203      	movs	r2, #3
 8002d92:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0e5      	b.n	8002f64 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dbe3      	blt.n	8002d6a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7fe fa88 	bl	80012b8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	69d2      	ldr	r2, [r2, #28]
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	ea02 0103 	and.w	r1, r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	21ff      	movs	r1, #255	@ 0xff
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	ea02 0103 	and.w	r1, r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d11d      	bne.n	8002e50 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	221f      	movs	r2, #31
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2207      	movs	r2, #7
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef4:	d104      	bne.n	8002f00 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e018      	b.n	8002f32 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d104      	bne.n	8002f12 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e00f      	b.n	8002f32 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f12:	f001 f9fb 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8002f16:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_DAC_ConfigChannel+0x294>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d904      	bls.n	8002f2a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e003      	b.n	8002f32 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f30:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	22c0      	movs	r2, #192	@ 0xc0
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	04c4b400 	.word	0x04c4b400

08002f70 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e166      	b.n	8003262 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8158 	beq.w	800325c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d005      	beq.n	8002fc4 <HAL_GPIO_Init+0x40>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0201 	and.w	r2, r3, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b03      	cmp	r3, #3
 8003030:	d017      	beq.n	8003062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d123      	bne.n	80030b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80b2 	beq.w	800325c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f8:	4b61      	ldr	r3, [pc, #388]	@ (8003280 <HAL_GPIO_Init+0x2fc>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	4a60      	ldr	r2, [pc, #384]	@ (8003280 <HAL_GPIO_Init+0x2fc>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6613      	str	r3, [r2, #96]	@ 0x60
 8003104:	4b5e      	ldr	r3, [pc, #376]	@ (8003280 <HAL_GPIO_Init+0x2fc>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003110:	4a5c      	ldr	r2, [pc, #368]	@ (8003284 <HAL_GPIO_Init+0x300>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800313a:	d02b      	beq.n	8003194 <HAL_GPIO_Init+0x210>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a52      	ldr	r2, [pc, #328]	@ (8003288 <HAL_GPIO_Init+0x304>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d025      	beq.n	8003190 <HAL_GPIO_Init+0x20c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a51      	ldr	r2, [pc, #324]	@ (800328c <HAL_GPIO_Init+0x308>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01f      	beq.n	800318c <HAL_GPIO_Init+0x208>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a50      	ldr	r2, [pc, #320]	@ (8003290 <HAL_GPIO_Init+0x30c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d019      	beq.n	8003188 <HAL_GPIO_Init+0x204>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a4f      	ldr	r2, [pc, #316]	@ (8003294 <HAL_GPIO_Init+0x310>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_GPIO_Init+0x200>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4e      	ldr	r2, [pc, #312]	@ (8003298 <HAL_GPIO_Init+0x314>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00d      	beq.n	8003180 <HAL_GPIO_Init+0x1fc>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a4d      	ldr	r2, [pc, #308]	@ (800329c <HAL_GPIO_Init+0x318>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <HAL_GPIO_Init+0x1f8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a4c      	ldr	r2, [pc, #304]	@ (80032a0 <HAL_GPIO_Init+0x31c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_GPIO_Init+0x1f4>
 8003174:	2307      	movs	r3, #7
 8003176:	e00e      	b.n	8003196 <HAL_GPIO_Init+0x212>
 8003178:	2308      	movs	r3, #8
 800317a:	e00c      	b.n	8003196 <HAL_GPIO_Init+0x212>
 800317c:	2306      	movs	r3, #6
 800317e:	e00a      	b.n	8003196 <HAL_GPIO_Init+0x212>
 8003180:	2305      	movs	r3, #5
 8003182:	e008      	b.n	8003196 <HAL_GPIO_Init+0x212>
 8003184:	2304      	movs	r3, #4
 8003186:	e006      	b.n	8003196 <HAL_GPIO_Init+0x212>
 8003188:	2303      	movs	r3, #3
 800318a:	e004      	b.n	8003196 <HAL_GPIO_Init+0x212>
 800318c:	2302      	movs	r3, #2
 800318e:	e002      	b.n	8003196 <HAL_GPIO_Init+0x212>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_GPIO_Init+0x212>
 8003194:	2300      	movs	r3, #0
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	f002 0203 	and.w	r2, r2, #3
 800319c:	0092      	lsls	r2, r2, #2
 800319e:	4093      	lsls	r3, r2
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031a6:	4937      	ldr	r1, [pc, #220]	@ (8003284 <HAL_GPIO_Init+0x300>)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031b4:	4b3b      	ldr	r3, [pc, #236]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d8:	4a32      	ldr	r2, [pc, #200]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031de:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003202:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003208:	4b26      	ldr	r3, [pc, #152]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800322c:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003232:	4b1c      	ldr	r3, [pc, #112]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003256:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <HAL_GPIO_Init+0x320>)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3301      	adds	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f47f ae91 	bne.w	8002f94 <HAL_GPIO_Init+0x10>
  }
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	48000400 	.word	0x48000400
 800328c:	48000800 	.word	0x48000800
 8003290:	48000c00 	.word	0x48000c00
 8003294:	48001000 	.word	0x48001000
 8003298:	48001400 	.word	0x48001400
 800329c:	48001800 	.word	0x48001800
 80032a0:	48001c00 	.word	0x48001c00
 80032a4:	40010400 	.word	0x40010400

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032c4:	e002      	b.n	80032cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ee:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f806 	bl	8003308 <HAL_GPIO_EXTI_Callback>
  }
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af02      	add	r7, sp, #8
 8003324:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e101      	b.n	8003534 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd fe01 	bl	8000f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 f958 	bl	8006612 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7c1a      	ldrb	r2, [r3, #16]
 800336a:	f88d 2000 	strb.w	r2, [sp]
 800336e:	3304      	adds	r3, #4
 8003370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003372:	f003 f921 	bl	80065b8 <USB_CoreInit>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0d5      	b.n	8003534 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f003 f950 	bl	8006634 <USB_SetCurrentMode>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0c6      	b.n	8003534 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e04a      	b.n	8003442 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3315      	adds	r3, #21
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3314      	adds	r3, #20
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	b298      	uxth	r0, r3
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	332e      	adds	r3, #46	@ 0x2e
 80033e8:	4602      	mov	r2, r0
 80033ea:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3318      	adds	r3, #24
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	331c      	adds	r3, #28
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3320      	adds	r3, #32
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3324      	adds	r3, #36	@ 0x24
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	3301      	adds	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	791b      	ldrb	r3, [r3, #4]
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	429a      	cmp	r2, r3
 800344a:	d3af      	bcc.n	80033ac <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e044      	b.n	80034dc <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	3301      	adds	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	791b      	ldrb	r3, [r3, #4]
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3b5      	bcc.n	8003452 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7c1a      	ldrb	r2, [r3, #16]
 80034ee:	f88d 2000 	strb.w	r2, [sp]
 80034f2:	3304      	adds	r3, #4
 80034f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f6:	f003 f8e9 	bl	80066cc <USB_DevInit>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e013      	b.n	8003534 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7b1b      	ldrb	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f80a 	bl	800353c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fa8e 	bl	8006a4e <USB_DevDisconnect>

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356e:	f043 0303 	orr.w	r3, r3, #3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003588:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003594:	d102      	bne.n	800359c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359a:	e00b      	b.n	80035b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800359c:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800359e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035aa:	d102      	bne.n	80035b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80035ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035b0:	e000      	b.n	80035b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80035b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40007000 	.word	0x40007000

080035c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d141      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035de:	d131      	bne.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e0:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e6:	4a46      	ldr	r2, [pc, #280]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f0:	4b43      	ldr	r3, [pc, #268]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035f8:	4a41      	ldr	r2, [pc, #260]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003600:	4b40      	ldr	r3, [pc, #256]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2232      	movs	r2, #50	@ 0x32
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	4a3f      	ldr	r2, [pc, #252]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0c9b      	lsrs	r3, r3, #18
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	e002      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361e:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362a:	d102      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f2      	bne.n	8003618 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003632:	4b33      	ldr	r3, [pc, #204]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363e:	d158      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e057      	b.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003644:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800364a:	4a2d      	ldr	r2, [pc, #180]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003650:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003654:	e04d      	b.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800365c:	d141      	bne.n	80036e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366a:	d131      	bne.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800366c:	4b24      	ldr	r3, [pc, #144]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003672:	4a23      	ldr	r2, [pc, #140]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800367c:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003684:	4a1e      	ldr	r2, [pc, #120]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800368a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800368c:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2232      	movs	r2, #50	@ 0x32
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	0c9b      	lsrs	r3, r3, #18
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a2:	e002      	b.n	80036aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b6:	d102      	bne.n	80036be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f2      	bne.n	80036a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ca:	d112      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e011      	b.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036e0:	e007      	b.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40007000 	.word	0x40007000
 8003704:	20040000 	.word	0x20040000
 8003708:	431bde83 	.word	0x431bde83

0800370c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003710:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a04      	ldr	r2, [pc, #16]	@ (8003728 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800371a:	6053      	str	r3, [r2, #4]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40007000 	.word	0x40007000

0800372c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800373a:	6053      	str	r3, [r2, #4]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40007000 	.word	0x40007000

0800374c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f000 bc08 	b.w	8003f70 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003760:	4b96      	ldr	r3, [pc, #600]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800376a:	4b94      	ldr	r3, [pc, #592]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80e4 	beq.w	800394a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_RCC_OscConfig+0x4c>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	f040 808b 	bne.w	80038a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b01      	cmp	r3, #1
 8003794:	f040 8087 	bne.w	80038a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003798:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x64>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e3df      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	4b81      	ldr	r3, [pc, #516]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_RCC_OscConfig+0x7e>
 80037c0:	4b7e      	ldr	r3, [pc, #504]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c8:	e005      	b.n	80037d6 <HAL_RCC_OscConfig+0x8a>
 80037ca:	4b7c      	ldr	r3, [pc, #496]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d223      	bcs.n	8003822 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fdfe 	bl	80043e0 <RCC_SetFlashLatencyFromMSIRange>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e3c0      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ee:	4b73      	ldr	r3, [pc, #460]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a72      	ldr	r2, [pc, #456]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b70      	ldr	r3, [pc, #448]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	496d      	ldr	r1, [pc, #436]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380c:	4b6b      	ldr	r3, [pc, #428]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	4968      	ldr	r1, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e025      	b.n	800386e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003822:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b63      	ldr	r3, [pc, #396]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4960      	ldr	r1, [pc, #384]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003840:	4b5e      	ldr	r3, [pc, #376]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	495b      	ldr	r1, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fdbe 	bl	80043e0 <RCC_SetFlashLatencyFromMSIRange>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e380      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800386e:	f000 fcc1 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b51      	ldr	r3, [pc, #324]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	4950      	ldr	r1, [pc, #320]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a4e      	ldr	r2, [pc, #312]	@ (80039c4 <HAL_RCC_OscConfig+0x278>)
 800388c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800388e:	4b4e      	ldr	r3, [pc, #312]	@ (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fbe6 	bl	8001064 <HAL_InitTick>
 8003898:	4603      	mov	r3, r0
 800389a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d052      	beq.n	8003948 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	e364      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d032      	beq.n	8003914 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ba:	f7fd fcf1 	bl	80012a0 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c2:	f7fd fced 	bl	80012a0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e34d      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038e0:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a35      	ldr	r2, [pc, #212]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038e6:	f043 0308 	orr.w	r3, r3, #8
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b33      	ldr	r3, [pc, #204]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4930      	ldr	r1, [pc, #192]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fe:	4b2f      	ldr	r3, [pc, #188]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	492b      	ldr	r1, [pc, #172]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
 8003912:	e01a      	b.n	800394a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003920:	f7fd fcbe 	bl	80012a0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003928:	f7fd fcba 	bl	80012a0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e31a      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800393a:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1dc>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d073      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x21c>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d10e      	bne.n	8003980 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d10b      	bne.n	8003980 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d063      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d15f      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e2f7      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x24c>
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a0b      	ldr	r2, [pc, #44]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e025      	b.n	80039e4 <HAL_RCC_OscConfig+0x298>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a0:	d114      	bne.n	80039cc <HAL_RCC_OscConfig+0x280>
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a05      	ldr	r2, [pc, #20]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a02      	ldr	r2, [pc, #8]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e013      	b.n	80039e4 <HAL_RCC_OscConfig+0x298>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800a344 	.word	0x0800a344
 80039c4:	20040000 	.word	0x20040000
 80039c8:	20040004 	.word	0x20040004
 80039cc:	4ba0      	ldr	r3, [pc, #640]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fd fc58 	bl	80012a0 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fc54 	bl	80012a0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2b4      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a06:	4b92      	ldr	r3, [pc, #584]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x2a8>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fd fc44 	bl	80012a0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fc40 	bl	80012a0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e2a0      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2e:	4b88      	ldr	r3, [pc, #544]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2d0>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d060      	beq.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x310>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d119      	bne.n	8003a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d116      	bne.n	8003a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_OscConfig+0x328>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e27d      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b76      	ldr	r3, [pc, #472]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	4973      	ldr	r1, [pc, #460]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a88:	e040      	b.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d023      	beq.n	8003ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a92:	4b6f      	ldr	r3, [pc, #444]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a6e      	ldr	r2, [pc, #440]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fbff 	bl	80012a0 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fbfb 	bl	80012a0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e25b      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab8:	4b65      	ldr	r3, [pc, #404]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	495f      	ldr	r1, [pc, #380]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
 8003ad8:	e018      	b.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b5d      	ldr	r3, [pc, #372]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5c      	ldr	r2, [pc, #368]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fbdb 	bl	80012a0 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fd fbd7 	bl	80012a0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e237      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b00:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b20:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b26:	4a4a      	ldr	r2, [pc, #296]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd fbb6 	bl	80012a0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fd fbb2 	bl	80012a0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e212      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3ec>
 8003b58:	e01b      	b.n	8003b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b60:	4a3b      	ldr	r2, [pc, #236]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fd fb99 	bl	80012a0 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fd fb95 	bl	80012a0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1f5      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b84:	4b32      	ldr	r3, [pc, #200]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ef      	bne.n	8003b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a6 	beq.w	8003cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	4a26      	ldr	r2, [pc, #152]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d118      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be4:	f7fd fb5c 	bl	80012a0 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fd fb58 	bl	80012a0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1b8      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d108      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4d8>
 8003c12:	4b0f      	ldr	r3, [pc, #60]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c22:	e029      	b.n	8003c78 <HAL_RCC_OscConfig+0x52c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCC_OscConfig+0x50c>
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	4a07      	ldr	r2, [pc, #28]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	4a03      	ldr	r2, [pc, #12]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c4c:	e014      	b.n	8003c78 <HAL_RCC_OscConfig+0x52c>
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	4b9d      	ldr	r3, [pc, #628]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	4a9c      	ldr	r2, [pc, #624]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c68:	4b99      	ldr	r3, [pc, #612]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6e:	4a98      	ldr	r2, [pc, #608]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fb0e 	bl	80012a0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd fb0a 	bl	80012a0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e168      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9e:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ed      	beq.n	8003c88 <HAL_RCC_OscConfig+0x53c>
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fd faf7 	bl	80012a0 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fd faf3 	bl	80012a0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e151      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ccc:	4b80      	ldr	r3, [pc, #512]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ed      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cda:	7ffb      	ldrb	r3, [r7, #31]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d00:	4b73      	ldr	r3, [pc, #460]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d06:	4a72      	ldr	r2, [pc, #456]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fd fac6 	bl	80012a0 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d18:	f7fd fac2 	bl	80012a0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e122      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d2a:	4b69      	ldr	r3, [pc, #420]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ef      	beq.n	8003d18 <HAL_RCC_OscConfig+0x5cc>
 8003d38:	e01b      	b.n	8003d72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d3a:	4b65      	ldr	r3, [pc, #404]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d40:	4a63      	ldr	r2, [pc, #396]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd faa9 	bl	80012a0 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d52:	f7fd faa5 	bl	80012a0 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e105      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d64:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1ef      	bne.n	8003d52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80f9 	beq.w	8003f6e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	f040 80cf 	bne.w	8003f24 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d86:	4b52      	ldr	r3, [pc, #328]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0203 	and.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d12c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	3b01      	subs	r3, #1
 8003da6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d123      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d11b      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d113      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d109      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d071      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d068      	beq.n	8003ecc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dfa:	4b35      	ldr	r3, [pc, #212]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e06:	4b32      	ldr	r3, [pc, #200]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0ac      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e16:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e22:	f7fd fa3d 	bl	80012a0 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7fd fa39 	bl	80012a0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e099      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3c:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e48:	4b21      	ldr	r3, [pc, #132]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	4b21      	ldr	r3, [pc, #132]	@ (8003ed4 <HAL_RCC_OscConfig+0x788>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e62:	0212      	lsls	r2, r2, #8
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e6a:	0852      	lsrs	r2, r2, #1
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	0552      	lsls	r2, r2, #21
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e76:	0852      	lsrs	r2, r2, #1
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0652      	lsls	r2, r2, #25
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e82:	06d2      	lsls	r2, r2, #27
 8003e84:	430a      	orrs	r2, r1
 8003e86:	4912      	ldr	r1, [pc, #72]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ea4:	f7fd f9fc 	bl	80012a0 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd f9f8 	bl	80012a0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e058      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <HAL_RCC_OscConfig+0x784>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eca:	e050      	b.n	8003f6e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e04f      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d144      	bne.n	8003f6e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b24      	ldr	r3, [pc, #144]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003efc:	f7fd f9d0 	bl	80012a0 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd f9cc 	bl	80012a0 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e02c      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x7b8>
 8003f22:	e024      	b.n	8003f6e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d01f      	beq.n	8003f6a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd f9b3 	bl	80012a0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd f9af 	bl	80012a0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e00f      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	4905      	ldr	r1, [pc, #20]	@ (8003f78 <HAL_RCC_OscConfig+0x82c>)
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_RCC_OscConfig+0x830>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
 8003f68:	e001      	b.n	8003f6e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	feeefffc 	.word	0xfeeefffc

08003f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e11d      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b90      	ldr	r3, [pc, #576]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d910      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 020f 	bic.w	r2, r3, #15
 8003fae:	498b      	ldr	r1, [pc, #556]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b89      	ldr	r3, [pc, #548]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e105      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4b81      	ldr	r3, [pc, #516]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d908      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	497b      	ldr	r1, [pc, #492]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d079      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d11e      	bne.n	8004048 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	4b75      	ldr	r3, [pc, #468]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0dc      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800401a:	f000 fa3b 	bl	8004494 <RCC_GetSysClockFreqFromPLLSource>
 800401e:	4603      	mov	r3, r0
 8004020:	4a70      	ldr	r2, [pc, #448]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d946      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004026:	4b6e      	ldr	r3, [pc, #440]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d140      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004032:	4b6b      	ldr	r3, [pc, #428]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800403a:	4a69      	ldr	r2, [pc, #420]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 800403c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004040:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004042:	2380      	movs	r3, #128	@ 0x80
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e035      	b.n	80040b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004050:	4b63      	ldr	r3, [pc, #396]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d115      	bne.n	8004088 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0b9      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004068:	4b5d      	ldr	r3, [pc, #372]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0ad      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	4b59      	ldr	r3, [pc, #356]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0a5      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004088:	f000 f8b4 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 800408c:	4603      	mov	r3, r0
 800408e:	4a55      	ldr	r2, [pc, #340]	@ (80041e4 <HAL_RCC_ClockConfig+0x264>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d90f      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004094:	4b52      	ldr	r3, [pc, #328]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040a0:	4b4f      	ldr	r3, [pc, #316]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040a8:	4a4d      	ldr	r2, [pc, #308]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80040aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b4:	4b4a      	ldr	r3, [pc, #296]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 0203 	bic.w	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4947      	ldr	r1, [pc, #284]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c6:	f7fd f8eb 	bl	80012a0 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ce:	f7fd f8e7 	bl	80012a0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e077      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e4:	4b3e      	ldr	r3, [pc, #248]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 020c 	and.w	r2, r3, #12
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d1eb      	bne.n	80040ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b80      	cmp	r3, #128	@ 0x80
 80040fa:	d105      	bne.n	8004108 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040fc:	4b38      	ldr	r3, [pc, #224]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a37      	ldr	r2, [pc, #220]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004106:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	4b31      	ldr	r3, [pc, #196]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004120:	429a      	cmp	r2, r3
 8004122:	d208      	bcs.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	492b      	ldr	r1, [pc, #172]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004136:	4b29      	ldr	r3, [pc, #164]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d210      	bcs.n	8004166 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004144:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 020f 	bic.w	r2, r3, #15
 800414c:	4923      	ldr	r1, [pc, #140]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	4313      	orrs	r3, r2
 8004152:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004154:	4b21      	ldr	r3, [pc, #132]	@ (80041dc <HAL_RCC_ClockConfig+0x25c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d001      	beq.n	8004166 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e036      	b.n	80041d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004172:	4b1b      	ldr	r3, [pc, #108]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4918      	ldr	r1, [pc, #96]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004190:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4910      	ldr	r1, [pc, #64]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a4:	f000 f826 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <HAL_RCC_ClockConfig+0x260>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	490c      	ldr	r1, [pc, #48]	@ (80041e8 <HAL_RCC_ClockConfig+0x268>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <HAL_RCC_ClockConfig+0x26c>)
 80041c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041c4:	4b0a      	ldr	r3, [pc, #40]	@ (80041f0 <HAL_RCC_ClockConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc ff4b 	bl	8001064 <HAL_InitTick>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40022000 	.word	0x40022000
 80041e0:	40021000 	.word	0x40021000
 80041e4:	04c4b400 	.word	0x04c4b400
 80041e8:	0800a344 	.word	0x0800a344
 80041ec:	20040000 	.word	0x20040000
 80041f0:	20040004 	.word	0x20040004

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	@ 0x24
 80041f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4b3e      	ldr	r3, [pc, #248]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4b3b      	ldr	r3, [pc, #236]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d121      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11e      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004228:	4b34      	ldr	r3, [pc, #208]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004234:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004244:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004250:	4a2b      	ldr	r2, [pc, #172]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004264:	e00a      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d102      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800426c:	4b25      	ldr	r3, [pc, #148]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e004      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d101      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004278:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 800427a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d134      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b1e      	ldr	r3, [pc, #120]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0xa6>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d003      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004298:	e005      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800429a:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	e005      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a0:	4b19      	ldr	r3, [pc, #100]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 80042a2:	617b      	str	r3, [r7, #20]
      break;
 80042a4:	e002      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	617b      	str	r3, [r7, #20]
      break;
 80042aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ba:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fb03 f202 	mul.w	r2, r3, r2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d2:	4b0a      	ldr	r3, [pc, #40]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0e5b      	lsrs	r3, r3, #25
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	3301      	adds	r3, #1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ec:	69bb      	ldr	r3, [r7, #24]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	@ 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	0800a35c 	.word	0x0800a35c
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20040000 	.word	0x20040000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	@ (800434c <HAL_RCC_GetPCLK1Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	0800a354 	.word	0x0800a354

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004354:	f7ff ffda 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4904      	ldr	r1, [pc, #16]	@ (8004378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	0800a354 	.word	0x0800a354

0800437c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	220f      	movs	r2, #15
 800438a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800438c:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004398:	4b0f      	ldr	r3, [pc, #60]	@ (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043a4:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043b0:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <HAL_RCC_GetClockConfig+0x60>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40022000 	.word	0x40022000

080043e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043ec:	4b27      	ldr	r3, [pc, #156]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f8:	f7ff f8c4 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 80043fc:	6178      	str	r0, [r7, #20]
 80043fe:	e014      	b.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b22      	ldr	r3, [pc, #136]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	4a21      	ldr	r2, [pc, #132]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440a:	6593      	str	r3, [r2, #88]	@ 0x58
 800440c:	4b1f      	ldr	r3, [pc, #124]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004418:	f7ff f8b4 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 800441c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	4a1a      	ldr	r2, [pc, #104]	@ (800448c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004430:	d10b      	bne.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	@ 0x80
 8004436:	d913      	bls.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2ba0      	cmp	r3, #160	@ 0xa0
 800443c:	d902      	bls.n	8004444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800443e:	2302      	movs	r3, #2
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e00d      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e00a      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b7f      	cmp	r3, #127	@ 0x7f
 800444e:	d902      	bls.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004450:	2302      	movs	r3, #2
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e004      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b70      	cmp	r3, #112	@ 0x70
 800445a:	d101      	bne.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800445c:	2301      	movs	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 020f 	bic.w	r2, r3, #15
 8004468:	4909      	ldr	r1, [pc, #36]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004470:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	40022000 	.word	0x40022000

08004494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800449a:	4b2d      	ldr	r3, [pc, #180]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d00b      	beq.n	80044c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d825      	bhi.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d008      	beq.n	80044c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d11f      	bne.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044bc:	4b25      	ldr	r3, [pc, #148]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044be:	613b      	str	r3, [r7, #16]
    break;
 80044c0:	e01f      	b.n	8004502 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044c2:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044c4:	613b      	str	r3, [r7, #16]
    break;
 80044c6:	e01c      	b.n	8004502 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044c8:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e005      	b.n	80044f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80044f0:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f8:	613b      	str	r3, [r7, #16]
    break;
 80044fa:	e002      	b.n	8004502 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
    break;
 8004500:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004502:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	3301      	adds	r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004510:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	fb03 f202 	mul.w	r2, r3, r2
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	0e5b      	lsrs	r3, r3, #25
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004542:	683b      	ldr	r3, [r7, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40021000 	.word	0x40021000
 8004554:	00f42400 	.word	0x00f42400
 8004558:	007a1200 	.word	0x007a1200
 800455c:	0800a35c 	.word	0x0800a35c

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004568:	2300      	movs	r3, #0
 800456a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800456c:	2300      	movs	r3, #0
 800456e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	2b00      	cmp	r3, #0
 800457a:	d040      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004580:	2b80      	cmp	r3, #128	@ 0x80
 8004582:	d02a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004584:	2b80      	cmp	r3, #128	@ 0x80
 8004586:	d825      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004588:	2b60      	cmp	r3, #96	@ 0x60
 800458a:	d026      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800458c:	2b60      	cmp	r3, #96	@ 0x60
 800458e:	d821      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	d006      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d81d      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800459c:	2b20      	cmp	r3, #32
 800459e:	d010      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045a0:	e018      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a2:	4b89      	ldr	r3, [pc, #548]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a88      	ldr	r2, [pc, #544]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ae:	e015      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fb02 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c0:	e00c      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3320      	adds	r3, #32
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fbed 	bl	8004da8 <RCCEx_PLLSAI2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	74fb      	strb	r3, [r7, #19]
      break;
 80045d8:	e000      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80045da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e2:	4b79      	ldr	r3, [pc, #484]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045e8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f0:	4975      	ldr	r1, [pc, #468]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80045f8:	e001      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d047      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d030      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004618:	d82a      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800461a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800461e:	d02a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004624:	d824      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462a:	d008      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800462c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004630:	d81e      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463a:	d010      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800463c:	e018      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800463e:	4b62      	ldr	r3, [pc, #392]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a61      	ldr	r2, [pc, #388]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800464a:	e015      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fab4 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465c:	e00c      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3320      	adds	r3, #32
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fb9f 	bl	8004da8 <RCCEx_PLLSAI2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800466e:	e003      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	74fb      	strb	r3, [r7, #19]
      break;
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800467e:	4b52      	ldr	r3, [pc, #328]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	494e      	ldr	r1, [pc, #312]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004694:	e001      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 809f 	beq.w	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ac:	4b46      	ldr	r3, [pc, #280]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80046bc:	2300      	movs	r3, #0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c6:	4a40      	ldr	r2, [pc, #256]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ce:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046da:	2301      	movs	r3, #1
 80046dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046de:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046ea:	f7fc fdd9 	bl	80012a0 <HAL_GetTick>
 80046ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f0:	e009      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fc fdd5 	bl	80012a0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d902      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	74fb      	strb	r3, [r7, #19]
        break;
 8004704:	e005      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ef      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d15b      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004722:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01f      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d019      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004740:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004742:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800474a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004752:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004758:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800475a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004762:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d016      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fc fd94 	bl	80012a0 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477a:	e00b      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fc fd90 	bl	80012a0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d902      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	74fb      	strb	r3, [r7, #19]
            break;
 8004792:	e006      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004794:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ec      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a8:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	4903      	ldr	r1, [pc, #12]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047c0:	e008      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	74bb      	strb	r3, [r7, #18]
 80047c6:	e005      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d4:	7c7b      	ldrb	r3, [r7, #17]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4ba0      	ldr	r3, [pc, #640]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	4a9f      	ldr	r2, [pc, #636]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047f2:	4b9a      	ldr	r3, [pc, #616]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f8:	f023 0203 	bic.w	r2, r3, #3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004800:	4996      	ldr	r1, [pc, #600]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004814:	4b91      	ldr	r3, [pc, #580]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 020c 	bic.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	498e      	ldr	r1, [pc, #568]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004836:	4b89      	ldr	r3, [pc, #548]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004844:	4985      	ldr	r1, [pc, #532]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004858:	4b80      	ldr	r3, [pc, #512]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004866:	497d      	ldr	r1, [pc, #500]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800487a:	4b78      	ldr	r3, [pc, #480]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004888:	4974      	ldr	r1, [pc, #464]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800489c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048aa:	496c      	ldr	r1, [pc, #432]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048be:	4b67      	ldr	r3, [pc, #412]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048cc:	4963      	ldr	r1, [pc, #396]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048e0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ee:	495b      	ldr	r1, [pc, #364]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004902:	4b56      	ldr	r3, [pc, #344]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004908:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	4952      	ldr	r1, [pc, #328]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004924:	4b4d      	ldr	r3, [pc, #308]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	494a      	ldr	r1, [pc, #296]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004946:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	4941      	ldr	r1, [pc, #260]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004968:	4b3c      	ldr	r3, [pc, #240]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004976:	4939      	ldr	r1, [pc, #228]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d028      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800498a:	4b34      	ldr	r3, [pc, #208]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004998:	4930      	ldr	r1, [pc, #192]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049a8:	d106      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049aa:	4b2c      	ldr	r3, [pc, #176]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4a2b      	ldr	r2, [pc, #172]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049b4:	60d3      	str	r3, [r2, #12]
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2101      	movs	r1, #1
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f8f9 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d04d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f0:	d108      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80049f2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049f8:	4a18      	ldr	r2, [pc, #96]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a02:	e012      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a04:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a0a:	4a14      	ldr	r2, [pc, #80]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a10:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a14:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a22:	490e      	ldr	r1, [pc, #56]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a32:	d106      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a34:	4b09      	ldr	r3, [pc, #36]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a3e:	60d3      	str	r3, [r2, #12]
 8004a40:	e020      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a4a:	d109      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a02      	ldr	r2, [pc, #8]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a56:	60d3      	str	r3, [r2, #12]
 8004a58:	e014      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f8a5 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d028      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a90:	4b4a      	ldr	r3, [pc, #296]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a9e:	4947      	ldr	r1, [pc, #284]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aae:	d106      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab0:	4b42      	ldr	r3, [pc, #264]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a41      	ldr	r2, [pc, #260]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
 8004abc:	e011      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f876 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01e      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aee:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afe:	492f      	ldr	r1, [pc, #188]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f851 	bl	8004bc0 <RCCEx_PLLSAI1_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b22:	7cfb      	ldrb	r3, [r7, #19]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b38:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b3e:	f023 0204 	bic.w	r2, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b48:	491c      	ldr	r1, [pc, #112]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b62:	f023 0218 	bic.w	r2, r3, #24
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	4913      	ldr	r1, [pc, #76]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d017      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b90:	490a      	ldr	r1, [pc, #40]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a04      	ldr	r2, [pc, #16]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000

08004bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bce:	4b72      	ldr	r3, [pc, #456]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00e      	beq.n	8004bf8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bda:	4b6f      	ldr	r3, [pc, #444]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0203 	and.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d103      	bne.n	8004bf2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
       ||
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d142      	bne.n	8004c78 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
 8004bf6:	e03f      	b.n	8004c78 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d018      	beq.n	8004c32 <RCCEx_PLLSAI1_Config+0x72>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d825      	bhi.n	8004c50 <RCCEx_PLLSAI1_Config+0x90>
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d002      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0x4e>
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d009      	beq.n	8004c20 <RCCEx_PLLSAI1_Config+0x60>
 8004c0c:	e020      	b.n	8004c50 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c0e:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d11d      	bne.n	8004c56 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1e:	e01a      	b.n	8004c56 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c20:	4b5d      	ldr	r3, [pc, #372]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d116      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c30:	e013      	b.n	8004c5a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c32:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c3e:	4b56      	ldr	r3, [pc, #344]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c4e:	e006      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e004      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c56:	bf00      	nop
 8004c58:	e002      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c66:	4b4c      	ldr	r3, [pc, #304]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4949      	ldr	r1, [pc, #292]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 8086 	bne.w	8004d8c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c80:	4b45      	ldr	r3, [pc, #276]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a44      	ldr	r2, [pc, #272]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8c:	f7fc fb08 	bl	80012a0 <HAL_GetTick>
 8004c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c92:	e009      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c94:	f7fc fb04 	bl	80012a0 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d902      	bls.n	8004ca8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ca6:	e005      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1ef      	bne.n	8004c94 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d168      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc0:	4b35      	ldr	r3, [pc, #212]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6892      	ldr	r2, [r2, #8]
 8004ccc:	0211      	lsls	r1, r2, #8
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68d2      	ldr	r2, [r2, #12]
 8004cd2:	06d2      	lsls	r2, r2, #27
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6852      	ldr	r2, [r2, #4]
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	0112      	lsls	r2, r2, #4
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	492d      	ldr	r1, [pc, #180]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	610b      	str	r3, [r1, #16]
 8004ce6:	e02d      	b.n	8004d44 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d115      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cee:	4b2a      	ldr	r3, [pc, #168]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
 8004cfa:	0211      	lsls	r1, r2, #8
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6912      	ldr	r2, [r2, #16]
 8004d00:	0852      	lsrs	r2, r2, #1
 8004d02:	3a01      	subs	r2, #1
 8004d04:	0552      	lsls	r2, r2, #21
 8004d06:	4311      	orrs	r1, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6852      	ldr	r2, [r2, #4]
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	430a      	orrs	r2, r1
 8004d12:	4921      	ldr	r1, [pc, #132]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	610b      	str	r3, [r1, #16]
 8004d18:	e014      	b.n	8004d44 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	4b21      	ldr	r3, [pc, #132]	@ (8004da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6892      	ldr	r2, [r2, #8]
 8004d26:	0211      	lsls	r1, r2, #8
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6952      	ldr	r2, [r2, #20]
 8004d2c:	0852      	lsrs	r2, r2, #1
 8004d2e:	3a01      	subs	r2, #1
 8004d30:	0652      	lsls	r2, r2, #25
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6852      	ldr	r2, [r2, #4]
 8004d38:	3a01      	subs	r2, #1
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	4916      	ldr	r1, [pc, #88]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d44:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a13      	ldr	r2, [pc, #76]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fc faa6 	bl	80012a0 <HAL_GetTick>
 8004d54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d56:	e009      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d58:	f7fc faa2 	bl	80012a0 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d902      	bls.n	8004d6c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	73fb      	strb	r3, [r7, #15]
          break;
 8004d6a:	e005      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ef      	beq.n	8004d58 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	4904      	ldr	r1, [pc, #16]	@ (8004d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	07ff800f 	.word	0x07ff800f
 8004da0:	ff9f800f 	.word	0xff9f800f
 8004da4:	f9ff800f 	.word	0xf9ff800f

08004da8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004db6:	4b72      	ldr	r3, [pc, #456]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0203 	and.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d103      	bne.n	8004dda <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d142      	bne.n	8004e60 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
 8004dde:	e03f      	b.n	8004e60 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d018      	beq.n	8004e1a <RCCEx_PLLSAI2_Config+0x72>
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d825      	bhi.n	8004e38 <RCCEx_PLLSAI2_Config+0x90>
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d002      	beq.n	8004df6 <RCCEx_PLLSAI2_Config+0x4e>
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d009      	beq.n	8004e08 <RCCEx_PLLSAI2_Config+0x60>
 8004df4:	e020      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004df6:	4b62      	ldr	r3, [pc, #392]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d11d      	bne.n	8004e3e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e06:	e01a      	b.n	8004e3e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e08:	4b5d      	ldr	r3, [pc, #372]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d116      	bne.n	8004e42 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e18:	e013      	b.n	8004e42 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e1a:	4b59      	ldr	r3, [pc, #356]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e26:	4b56      	ldr	r3, [pc, #344]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e36:	e006      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3c:	e004      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d108      	bne.n	8004e60 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4949      	ldr	r1, [pc, #292]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8086 	bne.w	8004f74 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e68:	4b45      	ldr	r3, [pc, #276]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a44      	ldr	r2, [pc, #272]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fc fa14 	bl	80012a0 <HAL_GetTick>
 8004e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e7a:	e009      	b.n	8004e90 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e7c:	f7fc fa10 	bl	80012a0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d902      	bls.n	8004e90 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e8e:	e005      	b.n	8004e9c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e90:	4b3b      	ldr	r3, [pc, #236]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ef      	bne.n	8004e7c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d168      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d113      	bne.n	8004ed0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ea8:	4b35      	ldr	r3, [pc, #212]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	4b35      	ldr	r3, [pc, #212]	@ (8004f84 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6892      	ldr	r2, [r2, #8]
 8004eb4:	0211      	lsls	r1, r2, #8
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68d2      	ldr	r2, [r2, #12]
 8004eba:	06d2      	lsls	r2, r2, #27
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6852      	ldr	r2, [r2, #4]
 8004ec2:	3a01      	subs	r2, #1
 8004ec4:	0112      	lsls	r2, r2, #4
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	492d      	ldr	r1, [pc, #180]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	614b      	str	r3, [r1, #20]
 8004ece:	e02d      	b.n	8004f2c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d115      	bne.n	8004f02 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	4b2b      	ldr	r3, [pc, #172]	@ (8004f88 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	0211      	lsls	r1, r2, #8
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6912      	ldr	r2, [r2, #16]
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	3a01      	subs	r2, #1
 8004eec:	0552      	lsls	r2, r2, #21
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6852      	ldr	r2, [r2, #4]
 8004ef4:	3a01      	subs	r2, #1
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	4921      	ldr	r1, [pc, #132]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	614b      	str	r3, [r1, #20]
 8004f00:	e014      	b.n	8004f2c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f02:	4b1f      	ldr	r3, [pc, #124]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	0211      	lsls	r1, r2, #8
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6952      	ldr	r2, [r2, #20]
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	0652      	lsls	r2, r2, #25
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6852      	ldr	r2, [r2, #4]
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0112      	lsls	r2, r2, #4
 8004f24:	430a      	orrs	r2, r1
 8004f26:	4916      	ldr	r1, [pc, #88]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f2c:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a13      	ldr	r2, [pc, #76]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fc f9b2 	bl	80012a0 <HAL_GetTick>
 8004f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f3e:	e009      	b.n	8004f54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f40:	f7fc f9ae 	bl	80012a0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d902      	bls.n	8004f54 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	73fb      	strb	r3, [r7, #15]
          break;
 8004f52:	e005      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f54:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ef      	beq.n	8004f40 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f66:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	4904      	ldr	r1, [pc, #16]	@ (8004f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	07ff800f 	.word	0x07ff800f
 8004f88:	ff9f800f 	.word	0xff9f800f
 8004f8c:	f9ff800f 	.word	0xf9ff800f

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e049      	b.n	8005036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb ff94 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 fa9e 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a23      	ldr	r2, [pc, #140]	@ (8005104 <HAL_TIM_Base_Start_IT+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005082:	d018      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	@ (8005108 <HAL_TIM_Base_Start_IT+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	@ (800510c <HAL_TIM_Base_Start_IT+0xcc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	@ (8005110 <HAL_TIM_Base_Start_IT+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005114 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d115      	bne.n	80050e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	4b17      	ldr	r3, [pc, #92]	@ (800511c <HAL_TIM_Base_Start_IT+0xdc>)
 80050be:	4013      	ands	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d015      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ce:	d011      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	e008      	b.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e000      	b.n	80050f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40014000 	.word	0x40014000
 800511c:	00010007 	.word	0x00010007

08005120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d020      	beq.n	8005184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01b      	beq.n	8005184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0202 	mvn.w	r2, #2
 8005154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f9b2 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f9a4 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f9b5 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d020      	beq.n	80051d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01b      	beq.n	80051d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0204 	mvn.w	r2, #4
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f98c 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f97e 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f98f 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d020      	beq.n	800521c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0208 	mvn.w	r2, #8
 80051ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2204      	movs	r2, #4
 80051f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f966 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f958 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f969 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b00      	cmp	r3, #0
 8005224:	d020      	beq.n	8005268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01b      	beq.n	8005268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0210 	mvn.w	r2, #16
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2208      	movs	r2, #8
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f940 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f932 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f943 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0201 	mvn.w	r2, #1
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb fc86 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00c      	beq.n	80052ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fafd 	bl	80058b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 faf5 	bl	80058c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f8fd 	bl	80054fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0220 	mvn.w	r2, #32
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fabd 	bl	80058a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_TIM_ConfigClockSource+0x1c>
 8005346:	2302      	movs	r3, #2
 8005348:	e0b6      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x18a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005368:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800536c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005374:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005386:	d03e      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xd8>
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538c:	f200 8087 	bhi.w	800549e <HAL_TIM_ConfigClockSource+0x170>
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005394:	f000 8086 	beq.w	80054a4 <HAL_TIM_ConfigClockSource+0x176>
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539c:	d87f      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 800539e:	2b70      	cmp	r3, #112	@ 0x70
 80053a0:	d01a      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0xaa>
 80053a2:	2b70      	cmp	r3, #112	@ 0x70
 80053a4:	d87b      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 80053a6:	2b60      	cmp	r3, #96	@ 0x60
 80053a8:	d050      	beq.n	800544c <HAL_TIM_ConfigClockSource+0x11e>
 80053aa:	2b60      	cmp	r3, #96	@ 0x60
 80053ac:	d877      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 80053ae:	2b50      	cmp	r3, #80	@ 0x50
 80053b0:	d03c      	beq.n	800542c <HAL_TIM_ConfigClockSource+0xfe>
 80053b2:	2b50      	cmp	r3, #80	@ 0x50
 80053b4:	d873      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d058      	beq.n	800546c <HAL_TIM_ConfigClockSource+0x13e>
 80053ba:	2b40      	cmp	r3, #64	@ 0x40
 80053bc:	d86f      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 80053be:	2b30      	cmp	r3, #48	@ 0x30
 80053c0:	d064      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x15e>
 80053c2:	2b30      	cmp	r3, #48	@ 0x30
 80053c4:	d86b      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d060      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x15e>
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d867      	bhi.n	800549e <HAL_TIM_ConfigClockSource+0x170>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d05c      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x15e>
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d05a      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x15e>
 80053d6:	e062      	b.n	800549e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e8:	f000 f9b2 	bl	8005750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e04f      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005416:	f000 f99b 	bl	8005750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005428:	609a      	str	r2, [r3, #8]
      break;
 800542a:	e03c      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005438:	461a      	mov	r2, r3
 800543a:	f000 f90f 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2150      	movs	r1, #80	@ 0x50
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f968 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 800544a:	e02c      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005458:	461a      	mov	r2, r3
 800545a:	f000 f92e 	bl	80056ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2160      	movs	r1, #96	@ 0x60
 8005464:	4618      	mov	r0, r3
 8005466:	f000 f958 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 800546a:	e01c      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005478:	461a      	mov	r2, r3
 800547a:	f000 f8ef 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2140      	movs	r1, #64	@ 0x40
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f948 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 800548a:	e00c      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 f93f 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 800549c:	e003      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
      break;
 80054a2:	e000      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a46      	ldr	r2, [pc, #280]	@ (800563c <TIM_Base_SetConfig+0x12c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a43      	ldr	r2, [pc, #268]	@ (8005640 <TIM_Base_SetConfig+0x130>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a42      	ldr	r2, [pc, #264]	@ (8005644 <TIM_Base_SetConfig+0x134>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a41      	ldr	r2, [pc, #260]	@ (8005648 <TIM_Base_SetConfig+0x138>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a40      	ldr	r2, [pc, #256]	@ (800564c <TIM_Base_SetConfig+0x13c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a35      	ldr	r2, [pc, #212]	@ (800563c <TIM_Base_SetConfig+0x12c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01f      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005570:	d01b      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a32      	ldr	r2, [pc, #200]	@ (8005640 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d017      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a31      	ldr	r2, [pc, #196]	@ (8005644 <TIM_Base_SetConfig+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a30      	ldr	r2, [pc, #192]	@ (8005648 <TIM_Base_SetConfig+0x138>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <TIM_Base_SetConfig+0x13c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2e      	ldr	r2, [pc, #184]	@ (8005650 <TIM_Base_SetConfig+0x140>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2d      	ldr	r2, [pc, #180]	@ (8005654 <TIM_Base_SetConfig+0x144>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <TIM_Base_SetConfig+0x148>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a16      	ldr	r2, [pc, #88]	@ (800563c <TIM_Base_SetConfig+0x12c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a18      	ldr	r2, [pc, #96]	@ (800564c <TIM_Base_SetConfig+0x13c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a17      	ldr	r2, [pc, #92]	@ (8005650 <TIM_Base_SetConfig+0x140>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <TIM_Base_SetConfig+0x144>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <TIM_Base_SetConfig+0x148>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]
  }
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 030a 	bic.w	r3, r3, #10
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f023 0210 	bic.w	r2, r3, #16
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e068      	b.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a2d      	ldr	r2, [pc, #180]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d108      	bne.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1e      	ldr	r2, [pc, #120]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581a:	d018      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1b      	ldr	r2, [pc, #108]	@ (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a18      	ldr	r2, [pc, #96]	@ (8005898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a13      	ldr	r2, [pc, #76]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a14      	ldr	r2, [pc, #80]	@ (800589c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10c      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4313      	orrs	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40014000 	.word	0x40014000

080058a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e042      	b.n	8005974 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fb fa49 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2224      	movs	r2, #36	@ 0x24
 800590a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fb24 	bl	8005f74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f825 	bl	800597c <UART_SetConfig>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e01b      	b.n	8005974 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800594a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800595a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fba3 	bl	80060b8 <UART_CheckIdleState>
 8005972:	4603      	mov	r3, r0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800597c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005980:	b08c      	sub	sp, #48	@ 0x30
 8005982:	af00      	add	r7, sp, #0
 8005984:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4baa      	ldr	r3, [pc, #680]	@ (8005c54 <UART_SetConfig+0x2d8>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005c58 <UART_SetConfig+0x2dc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e4:	4313      	orrs	r3, r2
 80059e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80059f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	f023 010f 	bic.w	r1, r3, #15
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a90      	ldr	r2, [pc, #576]	@ (8005c5c <UART_SetConfig+0x2e0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d125      	bne.n	8005a6c <UART_SetConfig+0xf0>
 8005a20:	4b8f      	ldr	r3, [pc, #572]	@ (8005c60 <UART_SetConfig+0x2e4>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d81a      	bhi.n	8005a64 <UART_SetConfig+0xe8>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <UART_SetConfig+0xb8>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a45 	.word	0x08005a45
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a5d 	.word	0x08005a5d
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4a:	e116      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a52:	e112      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5a:	e10e      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a62:	e10a      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a6a:	e106      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7c      	ldr	r2, [pc, #496]	@ (8005c64 <UART_SetConfig+0x2e8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d138      	bne.n	8005ae8 <UART_SetConfig+0x16c>
 8005a76:	4b7a      	ldr	r3, [pc, #488]	@ (8005c60 <UART_SetConfig+0x2e4>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b0c      	cmp	r3, #12
 8005a82:	d82d      	bhi.n	8005ae0 <UART_SetConfig+0x164>
 8005a84:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <UART_SetConfig+0x110>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005ae1 	.word	0x08005ae1
 8005a98:	08005ae1 	.word	0x08005ae1
 8005a9c:	08005ad1 	.word	0x08005ad1
 8005aa0:	08005ae1 	.word	0x08005ae1
 8005aa4:	08005ae1 	.word	0x08005ae1
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ad9 	.word	0x08005ad9
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	e0d8      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ace:	e0d4      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad6:	e0d0      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005ad8:	2308      	movs	r3, #8
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ade:	e0cc      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae6:	e0c8      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5e      	ldr	r2, [pc, #376]	@ (8005c68 <UART_SetConfig+0x2ec>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d125      	bne.n	8005b3e <UART_SetConfig+0x1c2>
 8005af2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c60 <UART_SetConfig+0x2e4>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005afc:	2b30      	cmp	r3, #48	@ 0x30
 8005afe:	d016      	beq.n	8005b2e <UART_SetConfig+0x1b2>
 8005b00:	2b30      	cmp	r3, #48	@ 0x30
 8005b02:	d818      	bhi.n	8005b36 <UART_SetConfig+0x1ba>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d00a      	beq.n	8005b1e <UART_SetConfig+0x1a2>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d814      	bhi.n	8005b36 <UART_SetConfig+0x1ba>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <UART_SetConfig+0x19a>
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d008      	beq.n	8005b26 <UART_SetConfig+0x1aa>
 8005b14:	e00f      	b.n	8005b36 <UART_SetConfig+0x1ba>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1c:	e0ad      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b24:	e0a9      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b26:	2304      	movs	r3, #4
 8005b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2c:	e0a5      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b34:	e0a1      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b36:	2310      	movs	r3, #16
 8005b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3c:	e09d      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a4a      	ldr	r2, [pc, #296]	@ (8005c6c <UART_SetConfig+0x2f0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d125      	bne.n	8005b94 <UART_SetConfig+0x218>
 8005b48:	4b45      	ldr	r3, [pc, #276]	@ (8005c60 <UART_SetConfig+0x2e4>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b54:	d016      	beq.n	8005b84 <UART_SetConfig+0x208>
 8005b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b58:	d818      	bhi.n	8005b8c <UART_SetConfig+0x210>
 8005b5a:	2b80      	cmp	r3, #128	@ 0x80
 8005b5c:	d00a      	beq.n	8005b74 <UART_SetConfig+0x1f8>
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d814      	bhi.n	8005b8c <UART_SetConfig+0x210>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <UART_SetConfig+0x1f0>
 8005b66:	2b40      	cmp	r3, #64	@ 0x40
 8005b68:	d008      	beq.n	8005b7c <UART_SetConfig+0x200>
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0x210>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b72:	e082      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b74:	2302      	movs	r3, #2
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	e07e      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b82:	e07a      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b84:	2308      	movs	r3, #8
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8a:	e076      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b92:	e072      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a35      	ldr	r2, [pc, #212]	@ (8005c70 <UART_SetConfig+0x2f4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d12a      	bne.n	8005bf4 <UART_SetConfig+0x278>
 8005b9e:	4b30      	ldr	r3, [pc, #192]	@ (8005c60 <UART_SetConfig+0x2e4>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bac:	d01a      	beq.n	8005be4 <UART_SetConfig+0x268>
 8005bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bb2:	d81b      	bhi.n	8005bec <UART_SetConfig+0x270>
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb8:	d00c      	beq.n	8005bd4 <UART_SetConfig+0x258>
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbe:	d815      	bhi.n	8005bec <UART_SetConfig+0x270>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <UART_SetConfig+0x250>
 8005bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc8:	d008      	beq.n	8005bdc <UART_SetConfig+0x260>
 8005bca:	e00f      	b.n	8005bec <UART_SetConfig+0x270>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd2:	e052      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bda:	e04e      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be2:	e04a      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005be4:	2308      	movs	r3, #8
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bea:	e046      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf2:	e042      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <UART_SetConfig+0x2dc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d13a      	bne.n	8005c74 <UART_SetConfig+0x2f8>
 8005bfe:	4b18      	ldr	r3, [pc, #96]	@ (8005c60 <UART_SetConfig+0x2e4>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c0c:	d01a      	beq.n	8005c44 <UART_SetConfig+0x2c8>
 8005c0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c12:	d81b      	bhi.n	8005c4c <UART_SetConfig+0x2d0>
 8005c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c18:	d00c      	beq.n	8005c34 <UART_SetConfig+0x2b8>
 8005c1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c1e:	d815      	bhi.n	8005c4c <UART_SetConfig+0x2d0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <UART_SetConfig+0x2b0>
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c28:	d008      	beq.n	8005c3c <UART_SetConfig+0x2c0>
 8005c2a:	e00f      	b.n	8005c4c <UART_SetConfig+0x2d0>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c32:	e022      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3a:	e01e      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c42:	e01a      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4a:	e016      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	e012      	b.n	8005c7a <UART_SetConfig+0x2fe>
 8005c54:	cfff69f3 	.word	0xcfff69f3
 8005c58:	40008000 	.word	0x40008000
 8005c5c:	40013800 	.word	0x40013800
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40004400 	.word	0x40004400
 8005c68:	40004800 	.word	0x40004800
 8005c6c:	40004c00 	.word	0x40004c00
 8005c70:	40005000 	.word	0x40005000
 8005c74:	2310      	movs	r3, #16
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4aae      	ldr	r2, [pc, #696]	@ (8005f38 <UART_SetConfig+0x5bc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	f040 8097 	bne.w	8005db4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d823      	bhi.n	8005cd6 <UART_SetConfig+0x35a>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <UART_SetConfig+0x318>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cd7 	.word	0x08005cd7
 8005ca4:	08005cc7 	.word	0x08005cc7
 8005ca8:	08005cd7 	.word	0x08005cd7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005cd7 	.word	0x08005cd7
 8005cb4:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe fb34 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cbe:	e010      	b.n	8005ce2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b9e      	ldr	r3, [pc, #632]	@ (8005f3c <UART_SetConfig+0x5c0>)
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cc4:	e00d      	b.n	8005ce2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe fa95 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005cca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ccc:	e009      	b.n	8005ce2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cd4:	e005      	b.n	8005ce2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ce0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8130 	beq.w	8005f4a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	4a94      	ldr	r2, [pc, #592]	@ (8005f40 <UART_SetConfig+0x5c4>)
 8005cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d305      	bcc.n	8005d1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d903      	bls.n	8005d22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d20:	e113      	b.n	8005f4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2200      	movs	r2, #0
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	60fa      	str	r2, [r7, #12]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	4a84      	ldr	r2, [pc, #528]	@ (8005f40 <UART_SetConfig+0x5c4>)
 8005d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2200      	movs	r2, #0
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d44:	f7fa fa5c 	bl	8000200 <__aeabi_uldivmod>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	020b      	lsls	r3, r1, #8
 8005d5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d5e:	0202      	lsls	r2, r0, #8
 8005d60:	6979      	ldr	r1, [r7, #20]
 8005d62:	6849      	ldr	r1, [r1, #4]
 8005d64:	0849      	lsrs	r1, r1, #1
 8005d66:	2000      	movs	r0, #0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	eb12 0804 	adds.w	r8, r2, r4
 8005d70:	eb43 0905 	adc.w	r9, r3, r5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	469a      	mov	sl, r3
 8005d7c:	4693      	mov	fp, r2
 8005d7e:	4652      	mov	r2, sl
 8005d80:	465b      	mov	r3, fp
 8005d82:	4640      	mov	r0, r8
 8005d84:	4649      	mov	r1, r9
 8005d86:	f7fa fa3b 	bl	8000200 <__aeabi_uldivmod>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4613      	mov	r3, r2
 8005d90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d98:	d308      	bcc.n	8005dac <UART_SetConfig+0x430>
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005da0:	d204      	bcs.n	8005dac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a3a      	ldr	r2, [r7, #32]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	e0ce      	b.n	8005f4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005db2:	e0ca      	b.n	8005f4a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dbc:	d166      	bne.n	8005e8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005dbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d827      	bhi.n	8005e16 <UART_SetConfig+0x49a>
 8005dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <UART_SetConfig+0x450>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	08005e17 	.word	0x08005e17
 8005ddc:	08005e07 	.word	0x08005e07
 8005de0:	08005e17 	.word	0x08005e17
 8005de4:	08005e17 	.word	0x08005e17
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e0f 	.word	0x08005e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df0:	f7fe fa98 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005df6:	e014      	b.n	8005e22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df8:	f7fe faaa 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dfe:	e010      	b.n	8005e22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e00:	4b4e      	ldr	r3, [pc, #312]	@ (8005f3c <UART_SetConfig+0x5c0>)
 8005e02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e04:	e00d      	b.n	8005e22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e06:	f7fe f9f5 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005e0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e0c:	e009      	b.n	8005e22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e14:	e005      	b.n	8005e22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8090 	beq.w	8005f4a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4a44      	ldr	r2, [pc, #272]	@ (8005f40 <UART_SetConfig+0x5c4>)
 8005e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3c:	005a      	lsls	r2, r3, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	441a      	add	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d916      	bls.n	8005e84 <UART_SetConfig+0x508>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5c:	d212      	bcs.n	8005e84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f023 030f 	bic.w	r3, r3, #15
 8005e66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	8bfb      	ldrh	r3, [r7, #30]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	8bfa      	ldrh	r2, [r7, #30]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e062      	b.n	8005f4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e8a:	e05e      	b.n	8005f4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d828      	bhi.n	8005ee6 <UART_SetConfig+0x56a>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x520>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ed1 	.word	0x08005ed1
 8005ea8:	08005ee7 	.word	0x08005ee7
 8005eac:	08005ed7 	.word	0x08005ed7
 8005eb0:	08005ee7 	.word	0x08005ee7
 8005eb4:	08005ee7 	.word	0x08005ee7
 8005eb8:	08005ee7 	.word	0x08005ee7
 8005ebc:	08005edf 	.word	0x08005edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec0:	f7fe fa30 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec6:	e014      	b.n	8005ef2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec8:	f7fe fa42 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ece:	e010      	b.n	8005ef2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f3c <UART_SetConfig+0x5c0>)
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed4:	e00d      	b.n	8005ef2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed6:	f7fe f98d 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005eda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005edc:	e009      	b.n	8005ef2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ee4:	e005      	b.n	8005ef2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d028      	beq.n	8005f4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	4a10      	ldr	r2, [pc, #64]	@ (8005f40 <UART_SetConfig+0x5c4>)
 8005efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	441a      	add	r2, r3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	d910      	bls.n	8005f44 <UART_SetConfig+0x5c8>
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f28:	d20c      	bcs.n	8005f44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0x5ce>
 8005f36:	bf00      	nop
 8005f38:	40008000 	.word	0x40008000
 8005f3c:	00f42400 	.word	0x00f42400
 8005f40:	0800a38c 	.word	0x0800a38c
      }
      else
      {
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3730      	adds	r7, #48	@ 0x30
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006072:	d10a      	bne.n	800608a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b098      	sub	sp, #96	@ 0x60
 80060bc:	af02      	add	r7, sp, #8
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c8:	f7fb f8ea 	bl	80012a0 <HAL_GetTick>
 80060cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d12f      	bne.n	800613c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e4:	2200      	movs	r2, #0
 80060e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f88e 	bl	800620c <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d022      	beq.n	800613c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800610a:	653b      	str	r3, [r7, #80]	@ 0x50
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006114:	647b      	str	r3, [r7, #68]	@ 0x44
 8006116:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800611a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e063      	b.n	8006204 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d149      	bne.n	80061de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800614a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006152:	2200      	movs	r2, #0
 8006154:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f857 	bl	800620c <UART_WaitOnFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d03c      	beq.n	80061de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	623b      	str	r3, [r7, #32]
   return(result);
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30
 8006184:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b6:	61fa      	str	r2, [r7, #28]
 80061b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	617b      	str	r3, [r7, #20]
   return(result);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e012      	b.n	8006204 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3758      	adds	r7, #88	@ 0x58
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621c:	e04f      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d04b      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fb f83b 	bl	80012a0 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <UART_WaitOnFlagUntilTimeout+0x30>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e04e      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d037      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0xb2>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b80      	cmp	r3, #128	@ 0x80
 8006252:	d034      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b40      	cmp	r3, #64	@ 0x40
 8006258:	d031      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b08      	cmp	r3, #8
 8006266:	d110      	bne.n	800628a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2208      	movs	r2, #8
 800626e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f838 	bl	80062e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2208      	movs	r2, #8
 800627a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e029      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006298:	d111      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f81e 	bl	80062e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e00f      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4013      	ands	r3, r2
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d0a0      	beq.n	800621e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b095      	sub	sp, #84	@ 0x54
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630c:	643b      	str	r3, [r7, #64]	@ 0x40
 800630e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e6      	bne.n	80062ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006336:	f023 0301 	bic.w	r3, r3, #1
 800633a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800634a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e3      	bne.n	8006320 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d118      	bne.n	8006392 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	60bb      	str	r3, [r7, #8]
   return(result);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 0310 	bic.w	r3, r3, #16
 8006374:	647b      	str	r3, [r7, #68]	@ 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	613b      	str	r3, [r7, #16]
   return(result);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063a6:	bf00      	nop
 80063a8:	3754      	adds	r7, #84	@ 0x54
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e027      	b.n	8006418 <HAL_UARTEx_DisableFifoMode+0x66>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	@ 0x24
 80063d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006438:	2302      	movs	r3, #2
 800643a:	e02d      	b.n	8006498 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2224      	movs	r2, #36	@ 0x24
 8006448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f84f 	bl	800651c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e02d      	b.n	8006514 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2224      	movs	r2, #36	@ 0x24
 80064c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f811 	bl	800651c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800653c:	e031      	b.n	80065a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800653e:	2308      	movs	r3, #8
 8006540:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006542:	2308      	movs	r3, #8
 8006544:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	0e5b      	lsrs	r3, r3, #25
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	0f5b      	lsrs	r3, r3, #29
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	7b3a      	ldrb	r2, [r7, #12]
 800656a:	4911      	ldr	r1, [pc, #68]	@ (80065b0 <UARTEx_SetNbDataToProcess+0x94>)
 800656c:	5c8a      	ldrb	r2, [r1, r2]
 800656e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006572:	7b3a      	ldrb	r2, [r7, #12]
 8006574:	490f      	ldr	r1, [pc, #60]	@ (80065b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006576:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006578:	fb93 f3f2 	sdiv	r3, r3, r2
 800657c:	b29a      	uxth	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	7b7a      	ldrb	r2, [r7, #13]
 8006588:	4909      	ldr	r1, [pc, #36]	@ (80065b0 <UARTEx_SetNbDataToProcess+0x94>)
 800658a:	5c8a      	ldrb	r2, [r1, r2]
 800658c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006590:	7b7a      	ldrb	r2, [r7, #13]
 8006592:	4908      	ldr	r1, [pc, #32]	@ (80065b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006594:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006596:	fb93 f3f2 	sdiv	r3, r3, r2
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	0800a3a4 	.word	0x0800a3a4
 80065b4:	0800a3ac 	.word	0x0800a3ac

080065b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b8:	b084      	sub	sp, #16
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	f107 001c 	add.w	r0, r7, #28
 80065c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa68 	bl	8006aac <USB_CoreReset>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80065e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80065f4:	e005      	b.n	8006602 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800660e:	b004      	add	sp, #16
 8006610:	4770      	bx	lr

08006612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d115      	bne.n	8006682 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006662:	200a      	movs	r0, #10
 8006664:	f7fa fe28 	bl	80012b8 <HAL_Delay>
      ms += 10U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	330a      	adds	r3, #10
 800666c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa0e 	bl	8006a90 <USB_GetMode>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d01e      	beq.n	80066b8 <USB_SetCurrentMode+0x84>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2bc7      	cmp	r3, #199	@ 0xc7
 800667e:	d9f0      	bls.n	8006662 <USB_SetCurrentMode+0x2e>
 8006680:	e01a      	b.n	80066b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d115      	bne.n	80066b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006694:	200a      	movs	r0, #10
 8006696:	f7fa fe0f 	bl	80012b8 <HAL_Delay>
      ms += 10U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	330a      	adds	r3, #10
 800669e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9f5 	bl	8006a90 <USB_GetMode>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <USB_SetCurrentMode+0x84>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80066b0:	d9f0      	bls.n	8006694 <USB_SetCurrentMode+0x60>
 80066b2:	e001      	b.n	80066b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e005      	b.n	80066c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80066bc:	d101      	bne.n	80066c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066cc:	b084      	sub	sp, #16
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	e009      	b.n	8006700 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3340      	adds	r3, #64	@ 0x40
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	2200      	movs	r2, #0
 80066f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3301      	adds	r3, #1
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b0e      	cmp	r3, #14
 8006704:	d9f2      	bls.n	80066ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006706:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800670a:	2b00      	cmp	r3, #0
 800670c:	d11c      	bne.n	8006748 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006726:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e005      	b.n	8006754 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800675a:	461a      	mov	r2, r3
 800675c:	2300      	movs	r3, #0
 800675e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006760:	2103      	movs	r1, #3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f95a 	bl	8006a1c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006768:	2110      	movs	r1, #16
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8f6 	bl	800695c <USB_FlushTxFifo>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f920 	bl	80069c0 <USB_FlushRxFifo>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679c:	461a      	mov	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a8:	461a      	mov	r2, r3
 80067aa:	2300      	movs	r3, #0
 80067ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	e043      	b.n	800683c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ca:	d118      	bne.n	80067fe <USB_DevInit+0x132>
    {
      if (i == 0U)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067de:	461a      	mov	r2, r3
 80067e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e013      	b.n	8006810 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f4:	461a      	mov	r2, r3
 80067f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	e008      	b.n	8006810 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	461a      	mov	r2, r3
 800680c:	2300      	movs	r3, #0
 800680e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681c:	461a      	mov	r2, r3
 800681e:	2300      	movs	r3, #0
 8006820:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	461a      	mov	r2, r3
 8006830:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	3301      	adds	r3, #1
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006840:	461a      	mov	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4293      	cmp	r3, r2
 8006846:	d3b5      	bcc.n	80067b4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	e043      	b.n	80068d6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006864:	d118      	bne.n	8006898 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006878:	461a      	mov	r2, r3
 800687a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	e013      	b.n	80068aa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e008      	b.n	80068aa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a4:	461a      	mov	r2, r3
 80068a6:	2300      	movs	r3, #0
 80068a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	461a      	mov	r2, r3
 80068b8:	2300      	movs	r3, #0
 80068ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c8:	461a      	mov	r2, r3
 80068ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	3301      	adds	r3, #1
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068da:	461a      	mov	r2, r3
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4293      	cmp	r3, r2
 80068e0:	d3b5      	bcc.n	800684e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006902:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <USB_DevInit+0x28c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800691c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0208 	orr.w	r2, r3, #8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006930:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006934:	2b01      	cmp	r3, #1
 8006936:	d107      	bne.n	8006948 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006940:	f043 0304 	orr.w	r3, r3, #4
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006954:	b004      	add	sp, #16
 8006956:	4770      	bx	lr
 8006958:	803c3800 	.word	0x803c3800

0800695c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006976:	d901      	bls.n	800697c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e01b      	b.n	80069b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	daf2      	bge.n	800696a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	019b      	lsls	r3, r3, #6
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069a0:	d901      	bls.n	80069a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e006      	b.n	80069b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d0f0      	beq.n	8006994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069d8:	d901      	bls.n	80069de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e018      	b.n	8006a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	daf2      	bge.n	80069cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2210      	movs	r2, #16
 80069ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069fc:	d901      	bls.n	8006a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e006      	b.n	8006a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d0f0      	beq.n	80069f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ac4:	d901      	bls.n	8006aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e01b      	b.n	8006b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	daf2      	bge.n	8006ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aee:	d901      	bls.n	8006af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d0f0      	beq.n	8006ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <__NVIC_SetPriority>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	6039      	str	r1, [r7, #0]
 8006b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	db0a      	blt.n	8006b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	490c      	ldr	r1, [pc, #48]	@ (8006b5c <__NVIC_SetPriority+0x4c>)
 8006b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2e:	0112      	lsls	r2, r2, #4
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	440b      	add	r3, r1
 8006b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b38:	e00a      	b.n	8006b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	4908      	ldr	r1, [pc, #32]	@ (8006b60 <__NVIC_SetPriority+0x50>)
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	3b04      	subs	r3, #4
 8006b48:	0112      	lsls	r2, r2, #4
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	761a      	strb	r2, [r3, #24]
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	e000e100 	.word	0xe000e100
 8006b60:	e000ed00 	.word	0xe000ed00

08006b64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b68:	4b05      	ldr	r3, [pc, #20]	@ (8006b80 <SysTick_Handler+0x1c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b6c:	f002 f946 	bl	8008dfc <xTaskGetSchedulerState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d001      	beq.n	8006b7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b76:	f003 f83f 	bl	8009bf8 <xPortSysTickHandler>
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	e000e010 	.word	0xe000e010

08006b84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f06f 0004 	mvn.w	r0, #4
 8006b8e:	f7ff ffbf 	bl	8006b10 <__NVIC_SetPriority>
#endif
}
 8006b92:	bf00      	nop
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006baa:	f06f 0305 	mvn.w	r3, #5
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	e00c      	b.n	8006bcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bdc <osKernelInitialize+0x44>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bba:	4b08      	ldr	r3, [pc, #32]	@ (8006bdc <osKernelInitialize+0x44>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	e002      	b.n	8006bcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bcc:	687b      	ldr	r3, [r7, #4]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	200407f8 	.word	0x200407f8

08006be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be6:	f3ef 8305 	mrs	r3, IPSR
 8006bea:	603b      	str	r3, [r7, #0]
  return(result);
 8006bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8006bf2:	f06f 0305 	mvn.w	r3, #5
 8006bf6:	607b      	str	r3, [r7, #4]
 8006bf8:	e010      	b.n	8006c1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <osKernelStart+0x48>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d109      	bne.n	8006c16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c02:	f7ff ffbf 	bl	8006b84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c06:	4b08      	ldr	r3, [pc, #32]	@ (8006c28 <osKernelStart+0x48>)
 8006c08:	2202      	movs	r2, #2
 8006c0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c0c:	f001 fc92 	bl	8008534 <vTaskStartScheduler>
      stat = osOK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e002      	b.n	8006c1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c1c:	687b      	ldr	r3, [r7, #4]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200407f8 	.word	0x200407f8

08006c2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	@ 0x38
 8006c30:	af04      	add	r7, sp, #16
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c3c:	f3ef 8305 	mrs	r3, IPSR
 8006c40:	617b      	str	r3, [r7, #20]
  return(result);
 8006c42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d17e      	bne.n	8006d46 <osThreadNew+0x11a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d07b      	beq.n	8006d46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c4e:	2380      	movs	r3, #128	@ 0x80
 8006c50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c52:	2318      	movs	r3, #24
 8006c54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d045      	beq.n	8006cf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <osThreadNew+0x48>
        name = attr->name;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <osThreadNew+0x6e>
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	2b38      	cmp	r3, #56	@ 0x38
 8006c8c:	d805      	bhi.n	8006c9a <osThreadNew+0x6e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <osThreadNew+0x72>
        return (NULL);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e054      	b.n	8006d48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00e      	beq.n	8006cd4 <osThreadNew+0xa8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2ba7      	cmp	r3, #167	@ 0xa7
 8006cbc:	d90a      	bls.n	8006cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <osThreadNew+0xa8>
        mem = 1;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e010      	b.n	8006cf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10c      	bne.n	8006cf6 <osThreadNew+0xca>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d108      	bne.n	8006cf6 <osThreadNew+0xca>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d104      	bne.n	8006cf6 <osThreadNew+0xca>
          mem = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	e001      	b.n	8006cf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d110      	bne.n	8006d1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f001 fa50 	bl	80081b8 <xTaskCreateStatic>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	e013      	b.n	8006d46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d110      	bne.n	8006d46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f107 0310 	add.w	r3, r7, #16
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f001 fa9e 	bl	8008278 <xTaskCreate>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d001      	beq.n	8006d46 <osThreadNew+0x11a>
            hTask = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d46:	693b      	ldr	r3, [r7, #16]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	@ 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d60:	f3ef 8305 	mrs	r3, IPSR
 8006d64:	613b      	str	r3, [r7, #16]
  return(result);
 8006d66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d175      	bne.n	8006e58 <osSemaphoreNew+0x108>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d072      	beq.n	8006e58 <osSemaphoreNew+0x108>
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d86e      	bhi.n	8006e58 <osSemaphoreNew+0x108>
    mem = -1;
 8006d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d015      	beq.n	8006db2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <osSemaphoreNew+0x4c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b4f      	cmp	r3, #79	@ 0x4f
 8006d94:	d902      	bls.n	8006d9c <osSemaphoreNew+0x4c>
        mem = 1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e00c      	b.n	8006db6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <osSemaphoreNew+0x66>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <osSemaphoreNew+0x66>
          mem = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	e001      	b.n	8006db6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d04c      	beq.n	8006e58 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d128      	bne.n	8006e16 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d10a      	bne.n	8006de0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2203      	movs	r2, #3
 8006dd0:	9200      	str	r2, [sp, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	f000 fa2c 	bl	8007234 <xQueueGenericCreateStatic>
 8006ddc:	61f8      	str	r0, [r7, #28]
 8006dde:	e005      	b.n	8006dec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006de0:	2203      	movs	r2, #3
 8006de2:	2100      	movs	r1, #0
 8006de4:	2001      	movs	r0, #1
 8006de6:	f000 faa2 	bl	800732e <xQueueGenericCreate>
 8006dea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d022      	beq.n	8006e38 <osSemaphoreNew+0xe8>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01f      	beq.n	8006e38 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	69f8      	ldr	r0, [r7, #28]
 8006e00:	f000 fb62 	bl	80074c8 <xQueueGenericSend>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d016      	beq.n	8006e38 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006e0a:	69f8      	ldr	r0, [r7, #28]
 8006e0c:	f001 f800 	bl	8007e10 <vQueueDelete>
            hSemaphore = NULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	e010      	b.n	8006e38 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d108      	bne.n	8006e2e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	461a      	mov	r2, r3
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fae0 	bl	80073ea <xQueueCreateCountingSemaphoreStatic>
 8006e2a:	61f8      	str	r0, [r7, #28]
 8006e2c:	e004      	b.n	8006e38 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fb13 	bl	800745c <xQueueCreateCountingSemaphore>
 8006e36:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <osSemaphoreNew+0xfc>
          name = attr->name;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e001      	b.n	8006e50 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006e50:	6979      	ldr	r1, [r7, #20]
 8006e52:	69f8      	ldr	r0, [r7, #28]
 8006e54:	f001 f928 	bl	80080a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006e58:	69fb      	ldr	r3, [r7, #28]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006e7c:	f06f 0303 	mvn.w	r3, #3
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e039      	b.n	8006ef8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e84:	f3ef 8305 	mrs	r3, IPSR
 8006e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d022      	beq.n	8006ed6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006e96:	f06f 0303 	mvn.w	r3, #3
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e02c      	b.n	8006ef8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f000 ff2e 	bl	8007d0c <xQueueReceiveFromISR>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d003      	beq.n	8006ebe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006eb6:	f06f 0302 	mvn.w	r3, #2
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e01c      	b.n	8006ef8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d019      	beq.n	8006ef8 <osSemaphoreAcquire+0x94>
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <osSemaphoreAcquire+0xa0>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	e010      	b.n	8006ef8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6938      	ldr	r0, [r7, #16]
 8006eda:	f000 fe07 	bl	8007aec <xQueueSemaphoreTake>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d009      	beq.n	8006ef8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006eea:	f06f 0301 	mvn.w	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e002      	b.n	8006ef8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006ef2:	f06f 0302 	mvn.w	r3, #2
 8006ef6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ef8:	697b      	ldr	r3, [r7, #20]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006f1e:	f06f 0303 	mvn.w	r3, #3
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e02c      	b.n	8006f80 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f26:	f3ef 8305 	mrs	r3, IPSR
 8006f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01a      	beq.n	8006f68 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6938      	ldr	r0, [r7, #16]
 8006f3e:	f000 fc63 	bl	8007808 <xQueueGiveFromISR>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d003      	beq.n	8006f50 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006f48:	f06f 0302 	mvn.w	r3, #2
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	e017      	b.n	8006f80 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d014      	beq.n	8006f80 <osSemaphoreRelease+0x78>
 8006f56:	4b0d      	ldr	r3, [pc, #52]	@ (8006f8c <osSemaphoreRelease+0x84>)
 8006f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	e00b      	b.n	8006f80 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f000 faaa 	bl	80074c8 <xQueueGenericSend>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d002      	beq.n	8006f80 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006f7a:	f06f 0302 	mvn.w	r3, #2
 8006f7e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006f80:	697b      	ldr	r3, [r7, #20]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a07      	ldr	r2, [pc, #28]	@ (8006fbc <vApplicationGetIdleTaskMemory+0x2c>)
 8006fa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4a06      	ldr	r2, [pc, #24]	@ (8006fc0 <vApplicationGetIdleTaskMemory+0x30>)
 8006fa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2280      	movs	r2, #128	@ 0x80
 8006fac:	601a      	str	r2, [r3, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	200407fc 	.word	0x200407fc
 8006fc0:	200408a4 	.word	0x200408a4

08006fc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a07      	ldr	r2, [pc, #28]	@ (8006ff0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006fd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a06      	ldr	r2, [pc, #24]	@ (8006ff4 <vApplicationGetTimerTaskMemory+0x30>)
 8006fda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fe2:	601a      	str	r2, [r3, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	20040aa4 	.word	0x20040aa4
 8006ff4:	20040b4c 	.word	0x20040b4c

08006ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f103 0208 	add.w	r2, r3, #8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f103 0208 	add.w	r2, r3, #8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f103 0208 	add.w	r2, r3, #8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
}
 800708e:	bf00      	nop
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d103      	bne.n	80070ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e00c      	b.n	80070d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3308      	adds	r3, #8
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e002      	b.n	80070c8 <vListInsert+0x2e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d2f6      	bcs.n	80070c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6892      	ldr	r2, [r2, #8]
 8007122:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6852      	ldr	r2, [r2, #4]
 800712c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d103      	bne.n	8007140 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	1e5a      	subs	r2, r3, #1
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800718c:	f002 fca4 	bl	8009ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007198:	68f9      	ldr	r1, [r7, #12]
 800719a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071bc:	3b01      	subs	r3, #1
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	441a      	add	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	22ff      	movs	r2, #255	@ 0xff
 80071d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	22ff      	movs	r2, #255	@ 0xff
 80071d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d114      	bne.n	800720c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01a      	beq.n	8007220 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3310      	adds	r3, #16
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 fc3e 	bl	8008a70 <xTaskRemoveFromEventList>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d012      	beq.n	8007220 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <xQueueGenericReset+0xd0>)
 80071fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	e009      	b.n	8007220 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3310      	adds	r3, #16
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fef1 	bl	8006ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3324      	adds	r3, #36	@ 0x24
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff feec 	bl	8006ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007220:	f002 fc8c 	bl	8009b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007224:	2301      	movs	r3, #1
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08e      	sub	sp, #56	@ 0x38
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <xQueueGenericCreateStatic+0x56>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <xQueueGenericCreateStatic+0x5a>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <xQueueGenericCreateStatic+0x5c>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10b      	bne.n	80072ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	623b      	str	r3, [r7, #32]
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <xQueueGenericCreateStatic+0x84>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <xQueueGenericCreateStatic+0x88>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e000      	b.n	80072be <xQueueGenericCreateStatic+0x8a>
 80072bc:	2300      	movs	r3, #0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10b      	bne.n	80072da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	61fb      	str	r3, [r7, #28]
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	e7fd      	b.n	80072d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072da:	2350      	movs	r3, #80	@ 0x50
 80072dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b50      	cmp	r3, #80	@ 0x50
 80072e2:	d00b      	beq.n	80072fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	61bb      	str	r3, [r7, #24]
}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	e7fd      	b.n	80072f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00d      	beq.n	8007324 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007310:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f840 	bl	80073a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007326:	4618      	mov	r0, r3
 8007328:	3730      	adds	r7, #48	@ 0x30
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800732e:	b580      	push	{r7, lr}
 8007330:	b08a      	sub	sp, #40	@ 0x28
 8007332:	af02      	add	r7, sp, #8
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	4613      	mov	r3, r2
 800733a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	613b      	str	r3, [r7, #16]
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	e7fd      	b.n	8007356 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3350      	adds	r3, #80	@ 0x50
 8007368:	4618      	mov	r0, r3
 800736a:	f002 fcd7 	bl	8009d1c <pvPortMalloc>
 800736e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d011      	beq.n	800739a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	3350      	adds	r3, #80	@ 0x50
 800737e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007388:	79fa      	ldrb	r2, [r7, #7]
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f805 	bl	80073a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800739a:	69bb      	ldr	r3, [r7, #24]
	}
 800739c:	4618      	mov	r0, r3
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d103      	bne.n	80073c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e002      	b.n	80073c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073d2:	2101      	movs	r1, #1
 80073d4:	69b8      	ldr	r0, [r7, #24]
 80073d6:	f7ff fec3 	bl	8007160 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	78fa      	ldrb	r2, [r7, #3]
 80073de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b08a      	sub	sp, #40	@ 0x28
 80073ee:	af02      	add	r7, sp, #8
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61bb      	str	r3, [r7, #24]
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	e7fd      	b.n	8007410 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	429a      	cmp	r2, r3
 800741a:	d90b      	bls.n	8007434 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	617b      	str	r3, [r7, #20]
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007434:	2302      	movs	r3, #2
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	2100      	movs	r1, #0
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fef8 	bl	8007234 <xQueueGenericCreateStatic>
 8007444:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007452:	69fb      	ldr	r3, [r7, #28]
	}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	613b      	str	r3, [r7, #16]
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	e7fd      	b.n	8007480 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	d90b      	bls.n	80074a4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60fb      	str	r3, [r7, #12]
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	e7fd      	b.n	80074a0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074a4:	2202      	movs	r2, #2
 80074a6:	2100      	movs	r1, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff ff40 	bl	800732e <xQueueGenericCreate>
 80074ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074bc:	697b      	ldr	r3, [r7, #20]
	}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	@ 0x38
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074d6:	2300      	movs	r3, #0
 80074d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10b      	bne.n	80074fc <xQueueGenericSend+0x34>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <xQueueGenericSend+0x42>
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <xQueueGenericSend+0x46>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <xQueueGenericSend+0x48>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <xQueueGenericSend+0x64>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d103      	bne.n	800753a <xQueueGenericSend+0x72>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <xQueueGenericSend+0x76>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <xQueueGenericSend+0x78>
 800753e:	2300      	movs	r3, #0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <xQueueGenericSend+0x94>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	623b      	str	r3, [r7, #32]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800755c:	f001 fc4e 	bl	8008dfc <xTaskGetSchedulerState>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <xQueueGenericSend+0xa4>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <xQueueGenericSend+0xa8>
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <xQueueGenericSend+0xaa>
 8007570:	2300      	movs	r3, #0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10b      	bne.n	800758e <xQueueGenericSend+0xc6>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	61fb      	str	r3, [r7, #28]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800758e:	f002 faa3 	bl	8009ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	429a      	cmp	r2, r3
 800759c:	d302      	bcc.n	80075a4 <xQueueGenericSend+0xdc>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d129      	bne.n	80075f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075aa:	f000 fc6d 	bl	8007e88 <prvCopyDataToQueue>
 80075ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	3324      	adds	r3, #36	@ 0x24
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fa57 	bl	8008a70 <xTaskRemoveFromEventList>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d013      	beq.n	80075f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075c8:	4b3f      	ldr	r3, [pc, #252]	@ (80076c8 <xQueueGenericSend+0x200>)
 80075ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	e00a      	b.n	80075f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075e0:	4b39      	ldr	r3, [pc, #228]	@ (80076c8 <xQueueGenericSend+0x200>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075f0:	f002 faa4 	bl	8009b3c <vPortExitCritical>
				return pdPASS;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e063      	b.n	80076c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075fe:	f002 fa9d 	bl	8009b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007602:	2300      	movs	r3, #0
 8007604:	e05c      	b.n	80076c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800760c:	f107 0314 	add.w	r3, r7, #20
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fa91 	bl	8008b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007616:	2301      	movs	r3, #1
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800761a:	f002 fa8f 	bl	8009b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800761e:	f000 fff9 	bl	8008614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007622:	f002 fa59 	bl	8009ad8 <vPortEnterCritical>
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800762c:	b25b      	sxtb	r3, r3
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d103      	bne.n	800763c <xQueueGenericSend+0x174>
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007642:	b25b      	sxtb	r3, r3
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d103      	bne.n	8007652 <xQueueGenericSend+0x18a>
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007652:	f002 fa73 	bl	8009b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007656:	1d3a      	adds	r2, r7, #4
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fa80 	bl	8008b64 <xTaskCheckForTimeOut>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d124      	bne.n	80076b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800766a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800766c:	f000 fd04 	bl	8008078 <prvIsQueueFull>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d018      	beq.n	80076a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	3310      	adds	r3, #16
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f001 f9a4 	bl	80089cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007686:	f000 fc8f 	bl	8007fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800768a:	f000 ffd1 	bl	8008630 <xTaskResumeAll>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f af7c 	bne.w	800758e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007696:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <xQueueGenericSend+0x200>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	e772      	b.n	800758e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076aa:	f000 fc7d 	bl	8007fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ae:	f000 ffbf 	bl	8008630 <xTaskResumeAll>
 80076b2:	e76c      	b.n	800758e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076b6:	f000 fc77 	bl	8007fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ba:	f000 ffb9 	bl	8008630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3738      	adds	r7, #56	@ 0x38
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b090      	sub	sp, #64	@ 0x40
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <xQueueGenericSendFromISR+0x3e>
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <xQueueGenericSendFromISR+0x42>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <xQueueGenericSendFromISR+0x44>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	e7fd      	b.n	8007728 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d103      	bne.n	800773a <xQueueGenericSendFromISR+0x6e>
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <xQueueGenericSendFromISR+0x72>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <xQueueGenericSendFromISR+0x74>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	623b      	str	r3, [r7, #32]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800775c:	f002 fa9c 	bl	8009c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007760:	f3ef 8211 	mrs	r2, BASEPRI
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	61fa      	str	r2, [r7, #28]
 8007776:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007778:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007784:	429a      	cmp	r2, r3
 8007786:	d302      	bcc.n	800778e <xQueueGenericSendFromISR+0xc2>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d12f      	bne.n	80077ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007794:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077a4:	f000 fb70 	bl	8007e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d112      	bne.n	80077d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d016      	beq.n	80077e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077bc:	3324      	adds	r3, #36	@ 0x24
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 f956 	bl	8008a70 <xTaskRemoveFromEventList>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e007      	b.n	80077e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80077dc:	3301      	adds	r3, #1
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	b25a      	sxtb	r2, r3
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077e8:	2301      	movs	r3, #1
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077ec:	e001      	b.n	80077f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007800:	4618      	mov	r0, r3
 8007802:	3740      	adds	r7, #64	@ 0x40
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08e      	sub	sp, #56	@ 0x38
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	623b      	str	r3, [r7, #32]
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61fb      	str	r3, [r7, #28]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <xQueueGiveFromISR+0x5c>
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <xQueueGiveFromISR+0x60>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <xQueueGiveFromISR+0x62>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	61bb      	str	r3, [r7, #24]
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	e7fd      	b.n	8007882 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007886:	f002 fa07 	bl	8009c98 <vPortValidateInterruptPriority>
	__asm volatile
 800788a:	f3ef 8211 	mrs	r2, BASEPRI
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617a      	str	r2, [r7, #20]
 80078a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80078a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d22b      	bcs.n	800790e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d112      	bne.n	80078f8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d016      	beq.n	8007908 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	3324      	adds	r3, #36	@ 0x24
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 f8c6 	bl	8008a70 <xTaskRemoveFromEventList>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00e      	beq.n	8007908 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2201      	movs	r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	e007      	b.n	8007908 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078fc:	3301      	adds	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	b25a      	sxtb	r2, r3
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007908:	2301      	movs	r3, #1
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
 800790c:	e001      	b.n	8007912 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800790e:	2300      	movs	r3, #0
 8007910:	637b      	str	r3, [r7, #52]	@ 0x34
 8007912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007914:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f383 8811 	msr	BASEPRI, r3
}
 800791c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800791e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007920:	4618      	mov	r0, r3
 8007922:	3738      	adds	r7, #56	@ 0x38
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08c      	sub	sp, #48	@ 0x30
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007934:	2300      	movs	r3, #0
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <xQueueReceive+0x32>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	623b      	str	r3, [r7, #32]
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d103      	bne.n	8007968 <xQueueReceive+0x40>
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <xQueueReceive+0x44>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <xQueueReceive+0x46>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <xQueueReceive+0x62>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	61fb      	str	r3, [r7, #28]
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	e7fd      	b.n	8007986 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800798a:	f001 fa37 	bl	8008dfc <xTaskGetSchedulerState>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <xQueueReceive+0x72>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <xQueueReceive+0x76>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <xQueueReceive+0x78>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <xQueueReceive+0x94>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	61bb      	str	r3, [r7, #24]
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079bc:	f002 f88c 	bl	8009ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01f      	beq.n	8007a0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079d0:	f000 fac4 	bl	8007f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	1e5a      	subs	r2, r3, #1
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00f      	beq.n	8007a04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e6:	3310      	adds	r3, #16
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 f841 	bl	8008a70 <xTaskRemoveFromEventList>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079f4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ae8 <xQueueReceive+0x1c0>)
 80079f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a04:	f002 f89a 	bl	8009b3c <vPortExitCritical>
				return pdPASS;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e069      	b.n	8007ae0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a12:	f002 f893 	bl	8009b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e062      	b.n	8007ae0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a20:	f107 0310 	add.w	r3, r7, #16
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 f887 	bl	8008b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a2e:	f002 f885 	bl	8009b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a32:	f000 fdef 	bl	8008614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a36:	f002 f84f 	bl	8009ad8 <vPortEnterCritical>
 8007a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d103      	bne.n	8007a50 <xQueueReceive+0x128>
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a56:	b25b      	sxtb	r3, r3
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d103      	bne.n	8007a66 <xQueueReceive+0x13e>
 8007a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a66:	f002 f869 	bl	8009b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a6a:	1d3a      	adds	r2, r7, #4
 8007a6c:	f107 0310 	add.w	r3, r7, #16
 8007a70:	4611      	mov	r1, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f876 	bl	8008b64 <xTaskCheckForTimeOut>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d123      	bne.n	8007ac6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a80:	f000 fae4 	bl	800804c <prvIsQueueEmpty>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d017      	beq.n	8007aba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	3324      	adds	r3, #36	@ 0x24
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 ff9a 	bl	80089cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a9a:	f000 fa85 	bl	8007fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a9e:	f000 fdc7 	bl	8008630 <xTaskResumeAll>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d189      	bne.n	80079bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae8 <xQueueReceive+0x1c0>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	e780      	b.n	80079bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007abc:	f000 fa74 	bl	8007fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ac0:	f000 fdb6 	bl	8008630 <xTaskResumeAll>
 8007ac4:	e77a      	b.n	80079bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ac8:	f000 fa6e 	bl	8007fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007acc:	f000 fdb0 	bl	8008630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ad0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ad2:	f000 fabb 	bl	800804c <prvIsQueueEmpty>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f43f af6f 	beq.w	80079bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ade:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3730      	adds	r7, #48	@ 0x30
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08e      	sub	sp, #56	@ 0x38
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	623b      	str	r3, [r7, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	61fb      	str	r3, [r7, #28]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b40:	f001 f95c 	bl	8008dfc <xTaskGetSchedulerState>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <xQueueSemaphoreTake+0x64>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <xQueueSemaphoreTake+0x68>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e000      	b.n	8007b56 <xQueueSemaphoreTake+0x6a>
 8007b54:	2300      	movs	r3, #0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	61bb      	str	r3, [r7, #24]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b72:	f001 ffb1 	bl	8009ad8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d024      	beq.n	8007bcc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b84:	1e5a      	subs	r2, r3, #1
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b92:	f001 faad 	bl	80090f0 <pvTaskIncrementMutexHeldCount>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00f      	beq.n	8007bc4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 ff61 	bl	8008a70 <xTaskRemoveFromEventList>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bb4:	4b54      	ldr	r3, [pc, #336]	@ (8007d08 <xQueueSemaphoreTake+0x21c>)
 8007bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bc4:	f001 ffba 	bl	8009b3c <vPortExitCritical>
				return pdPASS;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e098      	b.n	8007cfe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d112      	bne.n	8007bf8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	617b      	str	r3, [r7, #20]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007bf0:	f001 ffa4 	bl	8009b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	e082      	b.n	8007cfe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bfe:	f107 030c 	add.w	r3, r7, #12
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 ff98 	bl	8008b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c0c:	f001 ff96 	bl	8009b3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c10:	f000 fd00 	bl	8008614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c14:	f001 ff60 	bl	8009ad8 <vPortEnterCritical>
 8007c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d103      	bne.n	8007c2e <xQueueSemaphoreTake+0x142>
 8007c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d103      	bne.n	8007c44 <xQueueSemaphoreTake+0x158>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c44:	f001 ff7a 	bl	8009b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c48:	463a      	mov	r2, r7
 8007c4a:	f107 030c 	add.w	r3, r7, #12
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 ff87 	bl	8008b64 <xTaskCheckForTimeOut>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d132      	bne.n	8007cc2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c5e:	f000 f9f5 	bl	800804c <prvIsQueueEmpty>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d026      	beq.n	8007cb6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007c70:	f001 ff32 	bl	8009ad8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 f8dd 	bl	8008e38 <xTaskPriorityInherit>
 8007c7e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007c80:	f001 ff5c 	bl	8009b3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	3324      	adds	r3, #36	@ 0x24
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fe9d 	bl	80089cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c94:	f000 f988 	bl	8007fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c98:	f000 fcca 	bl	8008630 <xTaskResumeAll>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f47f af67 	bne.w	8007b72 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007ca4:	4b18      	ldr	r3, [pc, #96]	@ (8007d08 <xQueueSemaphoreTake+0x21c>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	e75d      	b.n	8007b72 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cb8:	f000 f976 	bl	8007fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cbc:	f000 fcb8 	bl	8008630 <xTaskResumeAll>
 8007cc0:	e757      	b.n	8007b72 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cc4:	f000 f970 	bl	8007fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cc8:	f000 fcb2 	bl	8008630 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cce:	f000 f9bd 	bl	800804c <prvIsQueueEmpty>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f43f af4c 	beq.w	8007b72 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007ce0:	f001 fefa 	bl	8009ad8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ce4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ce6:	f000 f8b7 	bl	8007e58 <prvGetDisinheritPriorityAfterTimeout>
 8007cea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 f978 	bl	8008fe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cf8:	f001 ff20 	bl	8009b3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3738      	adds	r7, #56	@ 0x38
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	@ 0x38
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	623b      	str	r3, [r7, #32]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d103      	bne.n	8007d48 <xQueueReceiveFromISR+0x3c>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <xQueueReceiveFromISR+0x40>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <xQueueReceiveFromISR+0x42>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	61fb      	str	r3, [r7, #28]
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d6a:	f001 ff95 	bl	8009c98 <vPortValidateInterruptPriority>
	__asm volatile
 8007d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61ba      	str	r2, [r7, #24]
 8007d84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02f      	beq.n	8007df6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007da4:	f000 f8da 	bl	8007f5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007daa:	1e5a      	subs	r2, r3, #1
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d112      	bne.n	8007de0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d016      	beq.n	8007df0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	3310      	adds	r3, #16
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fe52 	bl	8008a70 <xTaskRemoveFromEventList>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00e      	beq.n	8007df0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e007      	b.n	8007df0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007de4:	3301      	adds	r3, #1
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	b25a      	sxtb	r2, r3
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007df0:	2301      	movs	r3, #1
 8007df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df4:	e001      	b.n	8007dfa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f383 8811 	msr	BASEPRI, r3
}
 8007e04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3738      	adds	r7, #56	@ 0x38
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <vQueueDelete+0x2a>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60bb      	str	r3, [r7, #8]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f95e 	bl	80080fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f002 f834 	bl	8009eb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d006      	beq.n	8007e76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e001      	b.n	8007e7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d14d      	bne.n	8007f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 f828 	bl	8008f08 <xTaskPriorityDisinherit>
 8007eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	609a      	str	r2, [r3, #8]
 8007ec0:	e043      	b.n	8007f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d119      	bne.n	8007efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6858      	ldr	r0, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	f002 f994 	bl	800a200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d32b      	bcc.n	8007f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	e026      	b.n	8007f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68d8      	ldr	r0, [r3, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	f002 f97a 	bl	800a200 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f14:	425b      	negs	r3, r3
 8007f16:	441a      	add	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d207      	bcs.n	8007f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	425b      	negs	r3, r3
 8007f32:	441a      	add	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d105      	bne.n	8007f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007f52:	697b      	ldr	r3, [r7, #20]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d018      	beq.n	8007fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f76:	441a      	add	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d303      	bcc.n	8007f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68d9      	ldr	r1, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6838      	ldr	r0, [r7, #0]
 8007f9c:	f002 f930 	bl	800a200 <memcpy>
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fb0:	f001 fd92 	bl	8009ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fbc:	e011      	b.n	8007fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d012      	beq.n	8007fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3324      	adds	r3, #36	@ 0x24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fd50 	bl	8008a70 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fd6:	f000 fe29 	bl	8008c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dce9      	bgt.n	8007fbe <prvUnlockQueue+0x16>
 8007fea:	e000      	b.n	8007fee <prvUnlockQueue+0x46>
					break;
 8007fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	22ff      	movs	r2, #255	@ 0xff
 8007ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ff6:	f001 fda1 	bl	8009b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ffa:	f001 fd6d 	bl	8009ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008006:	e011      	b.n	800802c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d012      	beq.n	8008036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3310      	adds	r3, #16
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fd2b 	bl	8008a70 <xTaskRemoveFromEventList>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008020:	f000 fe04 	bl	8008c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	3b01      	subs	r3, #1
 8008028:	b2db      	uxtb	r3, r3
 800802a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800802c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008030:	2b00      	cmp	r3, #0
 8008032:	dce9      	bgt.n	8008008 <prvUnlockQueue+0x60>
 8008034:	e000      	b.n	8008038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	22ff      	movs	r2, #255	@ 0xff
 800803c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008040:	f001 fd7c 	bl	8009b3c <vPortExitCritical>
}
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008054:	f001 fd40 	bl	8009ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e001      	b.n	800806a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800806a:	f001 fd67 	bl	8009b3c <vPortExitCritical>

	return xReturn;
 800806e:	68fb      	ldr	r3, [r7, #12]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008080:	f001 fd2a 	bl	8009ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808c:	429a      	cmp	r2, r3
 800808e:	d102      	bne.n	8008096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008090:	2301      	movs	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	e001      	b.n	800809a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800809a:	f001 fd4f 	bl	8009b3c <vPortExitCritical>

	return xReturn;
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e014      	b.n	80080e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080b8:	4a0f      	ldr	r2, [pc, #60]	@ (80080f8 <vQueueAddToRegistry+0x50>)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080c4:	490c      	ldr	r1, [pc, #48]	@ (80080f8 <vQueueAddToRegistry+0x50>)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080ce:	4a0a      	ldr	r2, [pc, #40]	@ (80080f8 <vQueueAddToRegistry+0x50>)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	4413      	add	r3, r2
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080da:	e006      	b.n	80080ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3301      	adds	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b07      	cmp	r3, #7
 80080e6:	d9e7      	bls.n	80080b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20040f4c 	.word	0x20040f4c

080080fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	e016      	b.n	8008138 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800810a:	4a10      	ldr	r2, [pc, #64]	@ (800814c <vQueueUnregisterQueue+0x50>)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	4413      	add	r3, r2
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d10b      	bne.n	8008132 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800811a:	4a0c      	ldr	r2, [pc, #48]	@ (800814c <vQueueUnregisterQueue+0x50>)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2100      	movs	r1, #0
 8008120:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008124:	4a09      	ldr	r2, [pc, #36]	@ (800814c <vQueueUnregisterQueue+0x50>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	4413      	add	r3, r2
 800812c:	2200      	movs	r2, #0
 800812e:	605a      	str	r2, [r3, #4]
				break;
 8008130:	e006      	b.n	8008140 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b07      	cmp	r3, #7
 800813c:	d9e5      	bls.n	800810a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20040f4c 	.word	0x20040f4c

08008150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008160:	f001 fcba 	bl	8009ad8 <vPortEnterCritical>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800816a:	b25b      	sxtb	r3, r3
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d103      	bne.n	800817a <vQueueWaitForMessageRestricted+0x2a>
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008180:	b25b      	sxtb	r3, r3
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d103      	bne.n	8008190 <vQueueWaitForMessageRestricted+0x40>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008190:	f001 fcd4 	bl	8009b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008198:	2b00      	cmp	r3, #0
 800819a:	d106      	bne.n	80081aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3324      	adds	r3, #36	@ 0x24
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fc37 	bl	8008a18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081aa:	6978      	ldr	r0, [r7, #20]
 80081ac:	f7ff fefc 	bl	8007fa8 <prvUnlockQueue>
	}
 80081b0:	bf00      	nop
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08e      	sub	sp, #56	@ 0x38
 80081bc:	af04      	add	r7, sp, #16
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	623b      	str	r3, [r7, #32]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <xTaskCreateStatic+0x4a>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	61fb      	str	r3, [r7, #28]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008202:	23a8      	movs	r3, #168	@ 0xa8
 8008204:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2ba8      	cmp	r3, #168	@ 0xa8
 800820a:	d00b      	beq.n	8008224 <xTaskCreateStatic+0x6c>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61bb      	str	r3, [r7, #24]
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	e7fd      	b.n	8008220 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008224:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01e      	beq.n	800826a <xTaskCreateStatic+0xb2>
 800822c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01b      	beq.n	800826a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823e:	2202      	movs	r2, #2
 8008240:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008244:	2300      	movs	r3, #0
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	9302      	str	r3, [sp, #8]
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 f851 	bl	8008304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008264:	f000 f8f6 	bl	8008454 <prvAddNewTaskToReadyList>
 8008268:	e001      	b.n	800826e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800826e:	697b      	ldr	r3, [r7, #20]
	}
 8008270:	4618      	mov	r0, r3
 8008272:	3728      	adds	r7, #40	@ 0x28
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08c      	sub	sp, #48	@ 0x30
 800827c:	af04      	add	r7, sp, #16
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	4613      	mov	r3, r2
 8008286:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4618      	mov	r0, r3
 800828e:	f001 fd45 	bl	8009d1c <pvPortMalloc>
 8008292:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800829a:	20a8      	movs	r0, #168	@ 0xa8
 800829c:	f001 fd3e 	bl	8009d1c <pvPortMalloc>
 80082a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80082ae:	e005      	b.n	80082bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082b0:	6978      	ldr	r0, [r7, #20]
 80082b2:	f001 fe01 	bl	8009eb8 <vPortFree>
 80082b6:	e001      	b.n	80082bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d017      	beq.n	80082f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082ca:	88fa      	ldrh	r2, [r7, #6]
 80082cc:	2300      	movs	r3, #0
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	9302      	str	r3, [sp, #8]
 80082d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68b9      	ldr	r1, [r7, #8]
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f80f 	bl	8008304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082e6:	69f8      	ldr	r0, [r7, #28]
 80082e8:	f000 f8b4 	bl	8008454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082ec:	2301      	movs	r3, #1
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e002      	b.n	80082f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295
 80082f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082f8:	69bb      	ldr	r3, [r7, #24]
	}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	461a      	mov	r2, r3
 800831c:	21a5      	movs	r1, #165	@ 0xa5
 800831e:	f001 feeb 	bl	800a0f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800832c:	3b01      	subs	r3, #1
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f003 0307 	and.w	r3, r3, #7
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	617b      	str	r3, [r7, #20]
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	e7fd      	b.n	800835a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01f      	beq.n	80083a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e012      	b.n	8008390 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4413      	add	r3, r2
 8008370:	7819      	ldrb	r1, [r3, #0]
 8008372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	3334      	adds	r3, #52	@ 0x34
 800837a:	460a      	mov	r2, r1
 800837c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	4413      	add	r3, r2
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3301      	adds	r3, #1
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b0f      	cmp	r3, #15
 8008394:	d9e9      	bls.n	800836a <prvInitialiseNewTask+0x66>
 8008396:	e000      	b.n	800839a <prvInitialiseNewTask+0x96>
			{
				break;
 8008398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083a2:	e003      	b.n	80083ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	2b37      	cmp	r3, #55	@ 0x37
 80083b0:	d901      	bls.n	80083b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083b2:	2337      	movs	r3, #55	@ 0x37
 80083b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	2200      	movs	r2, #0
 80083c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	3304      	adds	r3, #4
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fe33 	bl	8007038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	3318      	adds	r3, #24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fe2e 	bl	8007038 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	3354      	adds	r3, #84	@ 0x54
 8008406:	224c      	movs	r2, #76	@ 0x4c
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fe74 	bl	800a0f8 <memset>
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	4a0d      	ldr	r2, [pc, #52]	@ (8008448 <prvInitialiseNewTask+0x144>)
 8008414:	659a      	str	r2, [r3, #88]	@ 0x58
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	4a0c      	ldr	r2, [pc, #48]	@ (800844c <prvInitialiseNewTask+0x148>)
 800841a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800841c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841e:	4a0c      	ldr	r2, [pc, #48]	@ (8008450 <prvInitialiseNewTask+0x14c>)
 8008420:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	68f9      	ldr	r1, [r7, #12]
 8008426:	69b8      	ldr	r0, [r7, #24]
 8008428:	f001 fa24 	bl	8009874 <pxPortInitialiseStack>
 800842c:	4602      	mov	r2, r0
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800843e:	bf00      	nop
 8008440:	3720      	adds	r7, #32
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20042198 	.word	0x20042198
 800844c:	20042200 	.word	0x20042200
 8008450:	20042268 	.word	0x20042268

08008454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800845c:	f001 fb3c 	bl	8009ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008460:	4b2d      	ldr	r3, [pc, #180]	@ (8008518 <prvAddNewTaskToReadyList+0xc4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	4a2c      	ldr	r2, [pc, #176]	@ (8008518 <prvAddNewTaskToReadyList+0xc4>)
 8008468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800846a:	4b2c      	ldr	r3, [pc, #176]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008472:	4a2a      	ldr	r2, [pc, #168]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008478:	4b27      	ldr	r3, [pc, #156]	@ (8008518 <prvAddNewTaskToReadyList+0xc4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d110      	bne.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008480:	f000 fbf8 	bl	8008c74 <prvInitialiseTaskLists>
 8008484:	e00d      	b.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008486:	4b26      	ldr	r3, [pc, #152]	@ (8008520 <prvAddNewTaskToReadyList+0xcc>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800848e:	4b23      	ldr	r3, [pc, #140]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	429a      	cmp	r2, r3
 800849a:	d802      	bhi.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800849c:	4a1f      	ldr	r2, [pc, #124]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084a2:	4b20      	ldr	r3, [pc, #128]	@ (8008524 <prvAddNewTaskToReadyList+0xd0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008524 <prvAddNewTaskToReadyList+0xd0>)
 80084aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008524 <prvAddNewTaskToReadyList+0xd0>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <prvAddNewTaskToReadyList+0xd4>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d903      	bls.n	80084c8 <prvAddNewTaskToReadyList+0x74>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	4a18      	ldr	r2, [pc, #96]	@ (8008528 <prvAddNewTaskToReadyList+0xd4>)
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a15      	ldr	r2, [pc, #84]	@ (800852c <prvAddNewTaskToReadyList+0xd8>)
 80084d6:	441a      	add	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7fe fdb7 	bl	8007052 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084e4:	f001 fb2a 	bl	8009b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <prvAddNewTaskToReadyList+0xcc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084f0:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d207      	bcs.n	800850e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <prvAddNewTaskToReadyList+0xdc>)
 8008500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20041460 	.word	0x20041460
 800851c:	20040f8c 	.word	0x20040f8c
 8008520:	2004146c 	.word	0x2004146c
 8008524:	2004147c 	.word	0x2004147c
 8008528:	20041468 	.word	0x20041468
 800852c:	20040f90 	.word	0x20040f90
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	@ 0x28
 8008538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008542:	463a      	mov	r2, r7
 8008544:	1d39      	adds	r1, r7, #4
 8008546:	f107 0308 	add.w	r3, r7, #8
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe fd20 	bl	8006f90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	9202      	str	r2, [sp, #8]
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	2300      	movs	r3, #0
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	2300      	movs	r3, #0
 8008560:	460a      	mov	r2, r1
 8008562:	4924      	ldr	r1, [pc, #144]	@ (80085f4 <vTaskStartScheduler+0xc0>)
 8008564:	4824      	ldr	r0, [pc, #144]	@ (80085f8 <vTaskStartScheduler+0xc4>)
 8008566:	f7ff fe27 	bl	80081b8 <xTaskCreateStatic>
 800856a:	4603      	mov	r3, r0
 800856c:	4a23      	ldr	r2, [pc, #140]	@ (80085fc <vTaskStartScheduler+0xc8>)
 800856e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008570:	4b22      	ldr	r3, [pc, #136]	@ (80085fc <vTaskStartScheduler+0xc8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008578:	2301      	movs	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	e001      	b.n	8008582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d102      	bne.n	800858e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008588:	f000 fe1a 	bl	80091c0 <xTimerCreateTimerTask>
 800858c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d11b      	bne.n	80085cc <vTaskStartScheduler+0x98>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	613b      	str	r3, [r7, #16]
}
 80085a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085a8:	4b15      	ldr	r3, [pc, #84]	@ (8008600 <vTaskStartScheduler+0xcc>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3354      	adds	r3, #84	@ 0x54
 80085ae:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <vTaskStartScheduler+0xd0>)
 80085b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085b2:	4b15      	ldr	r3, [pc, #84]	@ (8008608 <vTaskStartScheduler+0xd4>)
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295
 80085b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085ba:	4b14      	ldr	r3, [pc, #80]	@ (800860c <vTaskStartScheduler+0xd8>)
 80085bc:	2201      	movs	r2, #1
 80085be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085c0:	4b13      	ldr	r3, [pc, #76]	@ (8008610 <vTaskStartScheduler+0xdc>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085c6:	f001 f9e3 	bl	8009990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085ca:	e00f      	b.n	80085ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d2:	d10b      	bne.n	80085ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60fb      	str	r3, [r7, #12]
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	e7fd      	b.n	80085e8 <vTaskStartScheduler+0xb4>
}
 80085ec:	bf00      	nop
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	0800a2f8 	.word	0x0800a2f8
 80085f8:	08008c45 	.word	0x08008c45
 80085fc:	20041484 	.word	0x20041484
 8008600:	20040f8c 	.word	0x20040f8c
 8008604:	20040010 	.word	0x20040010
 8008608:	20041480 	.word	0x20041480
 800860c:	2004146c 	.word	0x2004146c
 8008610:	20041464 	.word	0x20041464

08008614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008618:	4b04      	ldr	r3, [pc, #16]	@ (800862c <vTaskSuspendAll+0x18>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	4a03      	ldr	r2, [pc, #12]	@ (800862c <vTaskSuspendAll+0x18>)
 8008620:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008622:	bf00      	nop
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20041488 	.word	0x20041488

08008630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800863e:	4b42      	ldr	r3, [pc, #264]	@ (8008748 <xTaskResumeAll+0x118>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <xTaskResumeAll+0x2e>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	603b      	str	r3, [r7, #0]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800865e:	f001 fa3b 	bl	8009ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008662:	4b39      	ldr	r3, [pc, #228]	@ (8008748 <xTaskResumeAll+0x118>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a37      	ldr	r2, [pc, #220]	@ (8008748 <xTaskResumeAll+0x118>)
 800866a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800866c:	4b36      	ldr	r3, [pc, #216]	@ (8008748 <xTaskResumeAll+0x118>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d162      	bne.n	800873a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008674:	4b35      	ldr	r3, [pc, #212]	@ (800874c <xTaskResumeAll+0x11c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d05e      	beq.n	800873a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800867c:	e02f      	b.n	80086de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867e:	4b34      	ldr	r3, [pc, #208]	@ (8008750 <xTaskResumeAll+0x120>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3318      	adds	r3, #24
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fd3e 	bl	800710c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fd39 	bl	800710c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869e:	4b2d      	ldr	r3, [pc, #180]	@ (8008754 <xTaskResumeAll+0x124>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d903      	bls.n	80086ae <xTaskResumeAll+0x7e>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008754 <xTaskResumeAll+0x124>)
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4a27      	ldr	r2, [pc, #156]	@ (8008758 <xTaskResumeAll+0x128>)
 80086bc:	441a      	add	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7fe fcc4 	bl	8007052 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ce:	4b23      	ldr	r3, [pc, #140]	@ (800875c <xTaskResumeAll+0x12c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d302      	bcc.n	80086de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80086d8:	4b21      	ldr	r3, [pc, #132]	@ (8008760 <xTaskResumeAll+0x130>)
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086de:	4b1c      	ldr	r3, [pc, #112]	@ (8008750 <xTaskResumeAll+0x120>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1cb      	bne.n	800867e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086ec:	f000 fb66 	bl	8008dbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008764 <xTaskResumeAll+0x134>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d010      	beq.n	800871e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086fc:	f000 f846 	bl	800878c <xTaskIncrementTick>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008706:	4b16      	ldr	r3, [pc, #88]	@ (8008760 <xTaskResumeAll+0x130>)
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3b01      	subs	r3, #1
 8008710:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f1      	bne.n	80086fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008718:	4b12      	ldr	r3, [pc, #72]	@ (8008764 <xTaskResumeAll+0x134>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <xTaskResumeAll+0x130>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008726:	2301      	movs	r3, #1
 8008728:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800872a:	4b0f      	ldr	r3, [pc, #60]	@ (8008768 <xTaskResumeAll+0x138>)
 800872c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800873a:	f001 f9ff 	bl	8009b3c <vPortExitCritical>

	return xAlreadyYielded;
 800873e:	68bb      	ldr	r3, [r7, #8]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20041488 	.word	0x20041488
 800874c:	20041460 	.word	0x20041460
 8008750:	20041420 	.word	0x20041420
 8008754:	20041468 	.word	0x20041468
 8008758:	20040f90 	.word	0x20040f90
 800875c:	20040f8c 	.word	0x20040f8c
 8008760:	20041474 	.word	0x20041474
 8008764:	20041470 	.word	0x20041470
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008772:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <xTaskGetTickCount+0x1c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008778:	687b      	ldr	r3, [r7, #4]
}
 800877a:	4618      	mov	r0, r3
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	20041464 	.word	0x20041464

0800878c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008796:	4b4f      	ldr	r3, [pc, #316]	@ (80088d4 <xTaskIncrementTick+0x148>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 8090 	bne.w	80088c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087a0:	4b4d      	ldr	r3, [pc, #308]	@ (80088d8 <xTaskIncrementTick+0x14c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087a8:	4a4b      	ldr	r2, [pc, #300]	@ (80088d8 <xTaskIncrementTick+0x14c>)
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d121      	bne.n	80087f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80087b4:	4b49      	ldr	r3, [pc, #292]	@ (80088dc <xTaskIncrementTick+0x150>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	603b      	str	r3, [r7, #0]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <xTaskIncrementTick+0x46>
 80087d6:	4b41      	ldr	r3, [pc, #260]	@ (80088dc <xTaskIncrementTick+0x150>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	4b40      	ldr	r3, [pc, #256]	@ (80088e0 <xTaskIncrementTick+0x154>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a3e      	ldr	r2, [pc, #248]	@ (80088dc <xTaskIncrementTick+0x150>)
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	4a3e      	ldr	r2, [pc, #248]	@ (80088e0 <xTaskIncrementTick+0x154>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	4b3e      	ldr	r3, [pc, #248]	@ (80088e4 <xTaskIncrementTick+0x158>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3301      	adds	r3, #1
 80087f0:	4a3c      	ldr	r2, [pc, #240]	@ (80088e4 <xTaskIncrementTick+0x158>)
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	f000 fae2 	bl	8008dbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087f8:	4b3b      	ldr	r3, [pc, #236]	@ (80088e8 <xTaskIncrementTick+0x15c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d349      	bcc.n	8008896 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008802:	4b36      	ldr	r3, [pc, #216]	@ (80088dc <xTaskIncrementTick+0x150>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800880c:	4b36      	ldr	r3, [pc, #216]	@ (80088e8 <xTaskIncrementTick+0x15c>)
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	601a      	str	r2, [r3, #0]
					break;
 8008814:	e03f      	b.n	8008896 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008816:	4b31      	ldr	r3, [pc, #196]	@ (80088dc <xTaskIncrementTick+0x150>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d203      	bcs.n	8008836 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800882e:	4a2e      	ldr	r2, [pc, #184]	@ (80088e8 <xTaskIncrementTick+0x15c>)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008834:	e02f      	b.n	8008896 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	3304      	adds	r3, #4
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fc66 	bl	800710c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3318      	adds	r3, #24
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe fc5d 	bl	800710c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008856:	4b25      	ldr	r3, [pc, #148]	@ (80088ec <xTaskIncrementTick+0x160>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d903      	bls.n	8008866 <xTaskIncrementTick+0xda>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	4a22      	ldr	r2, [pc, #136]	@ (80088ec <xTaskIncrementTick+0x160>)
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4a1f      	ldr	r2, [pc, #124]	@ (80088f0 <xTaskIncrementTick+0x164>)
 8008874:	441a      	add	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	3304      	adds	r3, #4
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f7fe fbe8 	bl	8007052 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	4b1b      	ldr	r3, [pc, #108]	@ (80088f4 <xTaskIncrementTick+0x168>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888c:	429a      	cmp	r2, r3
 800888e:	d3b8      	bcc.n	8008802 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008894:	e7b5      	b.n	8008802 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008896:	4b17      	ldr	r3, [pc, #92]	@ (80088f4 <xTaskIncrementTick+0x168>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889c:	4914      	ldr	r1, [pc, #80]	@ (80088f0 <xTaskIncrementTick+0x164>)
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d901      	bls.n	80088b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80088ae:	2301      	movs	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088b2:	4b11      	ldr	r3, [pc, #68]	@ (80088f8 <xTaskIncrementTick+0x16c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	e004      	b.n	80088ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088c0:	4b0e      	ldr	r3, [pc, #56]	@ (80088fc <xTaskIncrementTick+0x170>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a0d      	ldr	r2, [pc, #52]	@ (80088fc <xTaskIncrementTick+0x170>)
 80088c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088ca:	697b      	ldr	r3, [r7, #20]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20041488 	.word	0x20041488
 80088d8:	20041464 	.word	0x20041464
 80088dc:	20041418 	.word	0x20041418
 80088e0:	2004141c 	.word	0x2004141c
 80088e4:	20041478 	.word	0x20041478
 80088e8:	20041480 	.word	0x20041480
 80088ec:	20041468 	.word	0x20041468
 80088f0:	20040f90 	.word	0x20040f90
 80088f4:	20040f8c 	.word	0x20040f8c
 80088f8:	20041474 	.word	0x20041474
 80088fc:	20041470 	.word	0x20041470

08008900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008906:	4b2b      	ldr	r3, [pc, #172]	@ (80089b4 <vTaskSwitchContext+0xb4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800890e:	4b2a      	ldr	r3, [pc, #168]	@ (80089b8 <vTaskSwitchContext+0xb8>)
 8008910:	2201      	movs	r2, #1
 8008912:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008914:	e047      	b.n	80089a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008916:	4b28      	ldr	r3, [pc, #160]	@ (80089b8 <vTaskSwitchContext+0xb8>)
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891c:	4b27      	ldr	r3, [pc, #156]	@ (80089bc <vTaskSwitchContext+0xbc>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	e011      	b.n	8008948 <vTaskSwitchContext+0x48>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10b      	bne.n	8008942 <vTaskSwitchContext+0x42>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	607b      	str	r3, [r7, #4]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <vTaskSwitchContext+0x3e>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b01      	subs	r3, #1
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	491d      	ldr	r1, [pc, #116]	@ (80089c0 <vTaskSwitchContext+0xc0>)
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0e3      	beq.n	8008924 <vTaskSwitchContext+0x24>
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4a16      	ldr	r2, [pc, #88]	@ (80089c0 <vTaskSwitchContext+0xc0>)
 8008968:	4413      	add	r3, r2
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	605a      	str	r2, [r3, #4]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	3308      	adds	r3, #8
 800897e:	429a      	cmp	r2, r3
 8008980:	d104      	bne.n	800898c <vTaskSwitchContext+0x8c>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	605a      	str	r2, [r3, #4]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	4a0c      	ldr	r2, [pc, #48]	@ (80089c4 <vTaskSwitchContext+0xc4>)
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	4a09      	ldr	r2, [pc, #36]	@ (80089bc <vTaskSwitchContext+0xbc>)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800899c:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <vTaskSwitchContext+0xc4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3354      	adds	r3, #84	@ 0x54
 80089a2:	4a09      	ldr	r2, [pc, #36]	@ (80089c8 <vTaskSwitchContext+0xc8>)
 80089a4:	6013      	str	r3, [r2, #0]
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20041488 	.word	0x20041488
 80089b8:	20041474 	.word	0x20041474
 80089bc:	20041468 	.word	0x20041468
 80089c0:	20040f90 	.word	0x20040f90
 80089c4:	20040f8c 	.word	0x20040f8c
 80089c8:	20040010 	.word	0x20040010

080089cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	60fb      	str	r3, [r7, #12]
}
 80089ee:	bf00      	nop
 80089f0:	bf00      	nop
 80089f2:	e7fd      	b.n	80089f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089f4:	4b07      	ldr	r3, [pc, #28]	@ (8008a14 <vTaskPlaceOnEventList+0x48>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3318      	adds	r3, #24
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7fe fb4c 	bl	800709a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a02:	2101      	movs	r1, #1
 8008a04:	6838      	ldr	r0, [r7, #0]
 8008a06:	f000 fb87 	bl	8009118 <prvAddCurrentTaskToDelayedList>
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20040f8c 	.word	0x20040f8c

08008a18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	617b      	str	r3, [r7, #20]
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	e7fd      	b.n	8008a3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a42:	4b0a      	ldr	r3, [pc, #40]	@ (8008a6c <vTaskPlaceOnEventListRestricted+0x54>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3318      	adds	r3, #24
 8008a48:	4619      	mov	r1, r3
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f7fe fb01 	bl	8007052 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	68b8      	ldr	r0, [r7, #8]
 8008a60:	f000 fb5a 	bl	8009118 <prvAddCurrentTaskToDelayedList>
	}
 8008a64:	bf00      	nop
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20040f8c 	.word	0x20040f8c

08008a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10b      	bne.n	8008a9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	60fb      	str	r3, [r7, #12]
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	3318      	adds	r3, #24
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fb32 	bl	800710c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b20 <xTaskRemoveFromEventList+0xb0>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d11d      	bne.n	8008aec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe fb29 	bl	800710c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abe:	4b19      	ldr	r3, [pc, #100]	@ (8008b24 <xTaskRemoveFromEventList+0xb4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d903      	bls.n	8008ace <xTaskRemoveFromEventList+0x5e>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aca:	4a16      	ldr	r2, [pc, #88]	@ (8008b24 <xTaskRemoveFromEventList+0xb4>)
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4a13      	ldr	r2, [pc, #76]	@ (8008b28 <xTaskRemoveFromEventList+0xb8>)
 8008adc:	441a      	add	r2, r3
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f7fe fab4 	bl	8007052 <vListInsertEnd>
 8008aea:	e005      	b.n	8008af8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	3318      	adds	r3, #24
 8008af0:	4619      	mov	r1, r3
 8008af2:	480e      	ldr	r0, [pc, #56]	@ (8008b2c <xTaskRemoveFromEventList+0xbc>)
 8008af4:	f7fe faad 	bl	8007052 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afc:	4b0c      	ldr	r3, [pc, #48]	@ (8008b30 <xTaskRemoveFromEventList+0xc0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d905      	bls.n	8008b12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b34 <xTaskRemoveFromEventList+0xc4>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e001      	b.n	8008b16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b16:	697b      	ldr	r3, [r7, #20]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20041488 	.word	0x20041488
 8008b24:	20041468 	.word	0x20041468
 8008b28:	20040f90 	.word	0x20040f90
 8008b2c:	20041420 	.word	0x20041420
 8008b30:	20040f8c 	.word	0x20040f8c
 8008b34:	20041474 	.word	0x20041474

08008b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b40:	4b06      	ldr	r3, [pc, #24]	@ (8008b5c <vTaskInternalSetTimeOutState+0x24>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b48:	4b05      	ldr	r3, [pc, #20]	@ (8008b60 <vTaskInternalSetTimeOutState+0x28>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	605a      	str	r2, [r3, #4]
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20041478 	.word	0x20041478
 8008b60:	20041464 	.word	0x20041464

08008b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10b      	bne.n	8008b8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	613b      	str	r3, [r7, #16]
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	e7fd      	b.n	8008b88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	e7fd      	b.n	8008ba6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008baa:	f000 ff95 	bl	8009ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bae:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <xTaskCheckForTimeOut+0xc0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d102      	bne.n	8008bce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e023      	b.n	8008c16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b15      	ldr	r3, [pc, #84]	@ (8008c28 <xTaskCheckForTimeOut+0xc4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d007      	beq.n	8008bea <xTaskCheckForTimeOut+0x86>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d302      	bcc.n	8008bea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	e015      	b.n	8008c16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d20b      	bcs.n	8008c0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ff99 	bl	8008b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61fb      	str	r3, [r7, #28]
 8008c0a:	e004      	b.n	8008c16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c12:	2301      	movs	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c16:	f000 ff91 	bl	8009b3c <vPortExitCritical>

	return xReturn;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20041464 	.word	0x20041464
 8008c28:	20041478 	.word	0x20041478

08008c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c30:	4b03      	ldr	r3, [pc, #12]	@ (8008c40 <vTaskMissedYield+0x14>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	601a      	str	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20041474 	.word	0x20041474

08008c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c4c:	f000 f852 	bl	8008cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c50:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <prvIdleTask+0x28>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d9f9      	bls.n	8008c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c58:	4b05      	ldr	r3, [pc, #20]	@ (8008c70 <prvIdleTask+0x2c>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c68:	e7f0      	b.n	8008c4c <prvIdleTask+0x8>
 8008c6a:	bf00      	nop
 8008c6c:	20040f90 	.word	0x20040f90
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
 8008c7e:	e00c      	b.n	8008c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4a12      	ldr	r2, [pc, #72]	@ (8008cd4 <prvInitialiseTaskLists+0x60>)
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe f9b2 	bl	8006ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3301      	adds	r3, #1
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b37      	cmp	r3, #55	@ 0x37
 8008c9e:	d9ef      	bls.n	8008c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ca0:	480d      	ldr	r0, [pc, #52]	@ (8008cd8 <prvInitialiseTaskLists+0x64>)
 8008ca2:	f7fe f9a9 	bl	8006ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ca6:	480d      	ldr	r0, [pc, #52]	@ (8008cdc <prvInitialiseTaskLists+0x68>)
 8008ca8:	f7fe f9a6 	bl	8006ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cac:	480c      	ldr	r0, [pc, #48]	@ (8008ce0 <prvInitialiseTaskLists+0x6c>)
 8008cae:	f7fe f9a3 	bl	8006ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cb2:	480c      	ldr	r0, [pc, #48]	@ (8008ce4 <prvInitialiseTaskLists+0x70>)
 8008cb4:	f7fe f9a0 	bl	8006ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cb8:	480b      	ldr	r0, [pc, #44]	@ (8008ce8 <prvInitialiseTaskLists+0x74>)
 8008cba:	f7fe f99d 	bl	8006ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008cec <prvInitialiseTaskLists+0x78>)
 8008cc0:	4a05      	ldr	r2, [pc, #20]	@ (8008cd8 <prvInitialiseTaskLists+0x64>)
 8008cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf0 <prvInitialiseTaskLists+0x7c>)
 8008cc6:	4a05      	ldr	r2, [pc, #20]	@ (8008cdc <prvInitialiseTaskLists+0x68>)
 8008cc8:	601a      	str	r2, [r3, #0]
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20040f90 	.word	0x20040f90
 8008cd8:	200413f0 	.word	0x200413f0
 8008cdc:	20041404 	.word	0x20041404
 8008ce0:	20041420 	.word	0x20041420
 8008ce4:	20041434 	.word	0x20041434
 8008ce8:	2004144c 	.word	0x2004144c
 8008cec:	20041418 	.word	0x20041418
 8008cf0:	2004141c 	.word	0x2004141c

08008cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cfa:	e019      	b.n	8008d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cfc:	f000 feec 	bl	8009ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d00:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <prvCheckTasksWaitingTermination+0x50>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe f9fd 	bl	800710c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <prvCheckTasksWaitingTermination+0x54>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	4a0b      	ldr	r2, [pc, #44]	@ (8008d48 <prvCheckTasksWaitingTermination+0x54>)
 8008d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d4c <prvCheckTasksWaitingTermination+0x58>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4a0a      	ldr	r2, [pc, #40]	@ (8008d4c <prvCheckTasksWaitingTermination+0x58>)
 8008d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d26:	f000 ff09 	bl	8009b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f810 	bl	8008d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d30:	4b06      	ldr	r3, [pc, #24]	@ (8008d4c <prvCheckTasksWaitingTermination+0x58>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e1      	bne.n	8008cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20041434 	.word	0x20041434
 8008d48:	20041460 	.word	0x20041460
 8008d4c:	20041448 	.word	0x20041448

08008d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3354      	adds	r3, #84	@ 0x54
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 f9d3 	bl	800a108 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d108      	bne.n	8008d7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 f8a1 	bl	8009eb8 <vPortFree>
				vPortFree( pxTCB );
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 f89e 	bl	8009eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d7c:	e019      	b.n	8008db2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d103      	bne.n	8008d90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 f895 	bl	8009eb8 <vPortFree>
	}
 8008d8e:	e010      	b.n	8008db2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d00b      	beq.n	8008db2 <prvDeleteTCB+0x62>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60fb      	str	r3, [r7, #12]
}
 8008dac:	bf00      	nop
 8008dae:	bf00      	nop
 8008db0:	e7fd      	b.n	8008dae <prvDeleteTCB+0x5e>
	}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008df4 <prvResetNextTaskUnblockTime+0x38>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <prvResetNextTaskUnblockTime+0x3c>)
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dd4:	e008      	b.n	8008de8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd6:	4b07      	ldr	r3, [pc, #28]	@ (8008df4 <prvResetNextTaskUnblockTime+0x38>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4a04      	ldr	r2, [pc, #16]	@ (8008df8 <prvResetNextTaskUnblockTime+0x3c>)
 8008de6:	6013      	str	r3, [r2, #0]
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	20041418 	.word	0x20041418
 8008df8:	20041480 	.word	0x20041480

08008dfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e02:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <xTaskGetSchedulerState+0x34>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	607b      	str	r3, [r7, #4]
 8008e0e:	e008      	b.n	8008e22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e10:	4b08      	ldr	r3, [pc, #32]	@ (8008e34 <xTaskGetSchedulerState+0x38>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	607b      	str	r3, [r7, #4]
 8008e1c:	e001      	b.n	8008e22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e22:	687b      	ldr	r3, [r7, #4]
	}
 8008e24:	4618      	mov	r0, r3
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	2004146c 	.word	0x2004146c
 8008e34:	20041488 	.word	0x20041488

08008e38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d051      	beq.n	8008ef2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e52:	4b2a      	ldr	r3, [pc, #168]	@ (8008efc <xTaskPriorityInherit+0xc4>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d241      	bcs.n	8008ee0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	db06      	blt.n	8008e72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e64:	4b25      	ldr	r3, [pc, #148]	@ (8008efc <xTaskPriorityInherit+0xc4>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6959      	ldr	r1, [r3, #20]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4a1f      	ldr	r2, [pc, #124]	@ (8008f00 <xTaskPriorityInherit+0xc8>)
 8008e84:	4413      	add	r3, r2
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d122      	bne.n	8008ed0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe f93c 	bl	800710c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e94:	4b19      	ldr	r3, [pc, #100]	@ (8008efc <xTaskPriorityInherit+0xc4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea2:	4b18      	ldr	r3, [pc, #96]	@ (8008f04 <xTaskPriorityInherit+0xcc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d903      	bls.n	8008eb2 <xTaskPriorityInherit+0x7a>
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eae:	4a15      	ldr	r2, [pc, #84]	@ (8008f04 <xTaskPriorityInherit+0xcc>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a10      	ldr	r2, [pc, #64]	@ (8008f00 <xTaskPriorityInherit+0xc8>)
 8008ec0:	441a      	add	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4610      	mov	r0, r2
 8008eca:	f7fe f8c2 	bl	8007052 <vListInsertEnd>
 8008ece:	e004      	b.n	8008eda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <xTaskPriorityInherit+0xc4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	e008      	b.n	8008ef2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ee4:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <xTaskPriorityInherit+0xc4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d201      	bcs.n	8008ef2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20040f8c 	.word	0x20040f8c
 8008f00:	20040f90 	.word	0x20040f90
 8008f04:	20041468 	.word	0x20041468

08008f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d058      	beq.n	8008fd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008fdc <xTaskPriorityDisinherit+0xd4>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d00b      	beq.n	8008f40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	60fb      	str	r3, [r7, #12]
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	e7fd      	b.n	8008f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10b      	bne.n	8008f60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	60bb      	str	r3, [r7, #8]
}
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f64:	1e5a      	subs	r2, r3, #1
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d02c      	beq.n	8008fd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d128      	bne.n	8008fd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe f8c2 	bl	800710c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe0 <xTaskPriorityDisinherit+0xd8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d903      	bls.n	8008fb0 <xTaskPriorityDisinherit+0xa8>
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fac:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe0 <xTaskPriorityDisinherit+0xd8>)
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4a09      	ldr	r2, [pc, #36]	@ (8008fe4 <xTaskPriorityDisinherit+0xdc>)
 8008fbe:	441a      	add	r2, r3
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f7fe f843 	bl	8007052 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fd0:	697b      	ldr	r3, [r7, #20]
	}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20040f8c 	.word	0x20040f8c
 8008fe0:	20041468 	.word	0x20041468
 8008fe4:	20040f90 	.word	0x20040f90

08008fe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d06c      	beq.n	80090da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10b      	bne.n	8009020 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	60fb      	str	r3, [r7, #12]
}
 800901a:	bf00      	nop
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d902      	bls.n	8009030 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	61fb      	str	r3, [r7, #28]
 800902e:	e002      	b.n	8009036 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009034:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	429a      	cmp	r2, r3
 800903e:	d04c      	beq.n	80090da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	429a      	cmp	r2, r3
 8009048:	d147      	bne.n	80090da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800904a:	4b26      	ldr	r3, [pc, #152]	@ (80090e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	429a      	cmp	r2, r3
 8009052:	d10b      	bne.n	800906c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60bb      	str	r3, [r7, #8]
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	e7fd      	b.n	8009068 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009070:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	db04      	blt.n	800908a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	6959      	ldr	r1, [r3, #20]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4a13      	ldr	r2, [pc, #76]	@ (80090e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800909a:	4413      	add	r3, r2
 800909c:	4299      	cmp	r1, r3
 800909e:	d11c      	bne.n	80090da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe f831 	bl	800710c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ae:	4b0f      	ldr	r3, [pc, #60]	@ (80090ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d903      	bls.n	80090be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	4a0c      	ldr	r2, [pc, #48]	@ (80090ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4a07      	ldr	r2, [pc, #28]	@ (80090e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80090cc:	441a      	add	r2, r3
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fd ffbc 	bl	8007052 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090da:	bf00      	nop
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20040f8c 	.word	0x20040f8c
 80090e8:	20040f90 	.word	0x20040f90
 80090ec:	20041468 	.word	0x20041468

080090f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80090f4:	4b07      	ldr	r3, [pc, #28]	@ (8009114 <pvTaskIncrementMutexHeldCount+0x24>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80090fc:	4b05      	ldr	r3, [pc, #20]	@ (8009114 <pvTaskIncrementMutexHeldCount+0x24>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009102:	3201      	adds	r2, #1
 8009104:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009106:	4b03      	ldr	r3, [pc, #12]	@ (8009114 <pvTaskIncrementMutexHeldCount+0x24>)
 8009108:	681b      	ldr	r3, [r3, #0]
	}
 800910a:	4618      	mov	r0, r3
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	20040f8c 	.word	0x20040f8c

08009118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009122:	4b21      	ldr	r3, [pc, #132]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009128:	4b20      	ldr	r3, [pc, #128]	@ (80091ac <prvAddCurrentTaskToDelayedList+0x94>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3304      	adds	r3, #4
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd ffec 	bl	800710c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d10a      	bne.n	8009152 <prvAddCurrentTaskToDelayedList+0x3a>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d007      	beq.n	8009152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009142:	4b1a      	ldr	r3, [pc, #104]	@ (80091ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4819      	ldr	r0, [pc, #100]	@ (80091b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800914c:	f7fd ff81 	bl	8007052 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009150:	e026      	b.n	80091a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4413      	add	r3, r2
 8009158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800915a:	4b14      	ldr	r3, [pc, #80]	@ (80091ac <prvAddCurrentTaskToDelayedList+0x94>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	429a      	cmp	r2, r3
 8009168:	d209      	bcs.n	800917e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800916a:	4b12      	ldr	r3, [pc, #72]	@ (80091b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b0f      	ldr	r3, [pc, #60]	@ (80091ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f7fd ff8f 	bl	800709a <vListInsert>
}
 800917c:	e010      	b.n	80091a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917e:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b0a      	ldr	r3, [pc, #40]	@ (80091ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7fd ff85 	bl	800709a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009190:	4b0a      	ldr	r3, [pc, #40]	@ (80091bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	429a      	cmp	r2, r3
 8009198:	d202      	bcs.n	80091a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800919a:	4a08      	ldr	r2, [pc, #32]	@ (80091bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	6013      	str	r3, [r2, #0]
}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20041464 	.word	0x20041464
 80091ac:	20040f8c 	.word	0x20040f8c
 80091b0:	2004144c 	.word	0x2004144c
 80091b4:	2004141c 	.word	0x2004141c
 80091b8:	20041418 	.word	0x20041418
 80091bc:	20041480 	.word	0x20041480

080091c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091ca:	f000 fb13 	bl	80097f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009244 <xTimerCreateTimerTask+0x84>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d021      	beq.n	800921a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091de:	1d3a      	adds	r2, r7, #4
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	f107 030c 	add.w	r3, r7, #12
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fd feeb 	bl	8006fc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	9202      	str	r2, [sp, #8]
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	2302      	movs	r3, #2
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	460a      	mov	r2, r1
 8009200:	4911      	ldr	r1, [pc, #68]	@ (8009248 <xTimerCreateTimerTask+0x88>)
 8009202:	4812      	ldr	r0, [pc, #72]	@ (800924c <xTimerCreateTimerTask+0x8c>)
 8009204:	f7fe ffd8 	bl	80081b8 <xTaskCreateStatic>
 8009208:	4603      	mov	r3, r0
 800920a:	4a11      	ldr	r2, [pc, #68]	@ (8009250 <xTimerCreateTimerTask+0x90>)
 800920c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800920e:	4b10      	ldr	r3, [pc, #64]	@ (8009250 <xTimerCreateTimerTask+0x90>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009216:	2301      	movs	r3, #1
 8009218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10b      	bne.n	8009238 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	613b      	str	r3, [r7, #16]
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009238:	697b      	ldr	r3, [r7, #20]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	200414bc 	.word	0x200414bc
 8009248:	0800a300 	.word	0x0800a300
 800924c:	0800938d 	.word	0x0800938d
 8009250:	200414c0 	.word	0x200414c0

08009254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	@ 0x28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009262:	2300      	movs	r3, #0
 8009264:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <xTimerGenericCommand+0x30>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	623b      	str	r3, [r7, #32]
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009284:	4b19      	ldr	r3, [pc, #100]	@ (80092ec <xTimerGenericCommand+0x98>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d02a      	beq.n	80092e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b05      	cmp	r3, #5
 800929c:	dc18      	bgt.n	80092d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800929e:	f7ff fdad 	bl	8008dfc <xTaskGetSchedulerState>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d109      	bne.n	80092bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092a8:	4b10      	ldr	r3, [pc, #64]	@ (80092ec <xTimerGenericCommand+0x98>)
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	f107 0110 	add.w	r1, r7, #16
 80092b0:	2300      	movs	r3, #0
 80092b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b4:	f7fe f908 	bl	80074c8 <xQueueGenericSend>
 80092b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ba:	e012      	b.n	80092e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092bc:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <xTimerGenericCommand+0x98>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	f107 0110 	add.w	r1, r7, #16
 80092c4:	2300      	movs	r3, #0
 80092c6:	2200      	movs	r2, #0
 80092c8:	f7fe f8fe 	bl	80074c8 <xQueueGenericSend>
 80092cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ce:	e008      	b.n	80092e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092d0:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <xTimerGenericCommand+0x98>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	f107 0110 	add.w	r1, r7, #16
 80092d8:	2300      	movs	r3, #0
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	f7fe f9f6 	bl	80076cc <xQueueGenericSendFromISR>
 80092e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3728      	adds	r7, #40	@ 0x28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	200414bc 	.word	0x200414bc

080092f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092fa:	4b23      	ldr	r3, [pc, #140]	@ (8009388 <prvProcessExpiredTimer+0x98>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7fd feff 	bl	800710c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b00      	cmp	r3, #0
 800931a:	d023      	beq.n	8009364 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	699a      	ldr	r2, [r3, #24]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	18d1      	adds	r1, r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	6978      	ldr	r0, [r7, #20]
 800932a:	f000 f8d5 	bl	80094d8 <prvInsertTimerInActiveList>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d020      	beq.n	8009376 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009334:	2300      	movs	r3, #0
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	2300      	movs	r3, #0
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	2100      	movs	r1, #0
 800933e:	6978      	ldr	r0, [r7, #20]
 8009340:	f7ff ff88 	bl	8009254 <xTimerGenericCommand>
 8009344:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d114      	bne.n	8009376 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	60fb      	str	r3, [r7, #12]
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	b2da      	uxtb	r2, r3
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	6978      	ldr	r0, [r7, #20]
 800937c:	4798      	blx	r3
}
 800937e:	bf00      	nop
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200414b4 	.word	0x200414b4

0800938c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	4618      	mov	r0, r3
 800939a:	f000 f859 	bl	8009450 <prvGetNextExpireTime>
 800939e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4619      	mov	r1, r3
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f805 	bl	80093b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093aa:	f000 f8d7 	bl	800955c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ae:	bf00      	nop
 80093b0:	e7f0      	b.n	8009394 <prvTimerTask+0x8>
	...

080093b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093be:	f7ff f929 	bl	8008614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f866 	bl	8009498 <prvSampleTimeNow>
 80093cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d130      	bne.n	8009436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <prvProcessTimerOrBlockTask+0x3c>
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d806      	bhi.n	80093f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093e2:	f7ff f925 	bl	8008630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093e6:	68f9      	ldr	r1, [r7, #12]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ff81 	bl	80092f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093ee:	e024      	b.n	800943a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093f6:	4b13      	ldr	r3, [pc, #76]	@ (8009444 <prvProcessTimerOrBlockTask+0x90>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <prvProcessTimerOrBlockTask+0x50>
 8009400:	2301      	movs	r3, #1
 8009402:	e000      	b.n	8009406 <prvProcessTimerOrBlockTask+0x52>
 8009404:	2300      	movs	r3, #0
 8009406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009408:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <prvProcessTimerOrBlockTask+0x94>)
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4619      	mov	r1, r3
 8009416:	f7fe fe9b 	bl	8008150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800941a:	f7ff f909 	bl	8008630 <xTaskResumeAll>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009424:	4b09      	ldr	r3, [pc, #36]	@ (800944c <prvProcessTimerOrBlockTask+0x98>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
}
 8009434:	e001      	b.n	800943a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009436:	f7ff f8fb 	bl	8008630 <xTaskResumeAll>
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	200414b8 	.word	0x200414b8
 8009448:	200414bc 	.word	0x200414bc
 800944c:	e000ed04 	.word	0xe000ed04

08009450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009458:	4b0e      	ldr	r3, [pc, #56]	@ (8009494 <prvGetNextExpireTime+0x44>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <prvGetNextExpireTime+0x16>
 8009462:	2201      	movs	r2, #1
 8009464:	e000      	b.n	8009468 <prvGetNextExpireTime+0x18>
 8009466:	2200      	movs	r2, #0
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009474:	4b07      	ldr	r3, [pc, #28]	@ (8009494 <prvGetNextExpireTime+0x44>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e001      	b.n	8009484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009484:	68fb      	ldr	r3, [r7, #12]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	200414b4 	.word	0x200414b4

08009498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094a0:	f7ff f964 	bl	800876c <xTaskGetTickCount>
 80094a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094a6:	4b0b      	ldr	r3, [pc, #44]	@ (80094d4 <prvSampleTimeNow+0x3c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d205      	bcs.n	80094bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094b0:	f000 f93a 	bl	8009728 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094c2:	4a04      	ldr	r2, [pc, #16]	@ (80094d4 <prvSampleTimeNow+0x3c>)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094c8:	68fb      	ldr	r3, [r7, #12]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200414c4 	.word	0x200414c4

080094d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d812      	bhi.n	8009524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	429a      	cmp	r2, r3
 800950a:	d302      	bcc.n	8009512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800950c:	2301      	movs	r3, #1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	e01b      	b.n	800954a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009512:	4b10      	ldr	r3, [pc, #64]	@ (8009554 <prvInsertTimerInActiveList+0x7c>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3304      	adds	r3, #4
 800951a:	4619      	mov	r1, r3
 800951c:	4610      	mov	r0, r2
 800951e:	f7fd fdbc 	bl	800709a <vListInsert>
 8009522:	e012      	b.n	800954a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	429a      	cmp	r2, r3
 800952a:	d206      	bcs.n	800953a <prvInsertTimerInActiveList+0x62>
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d302      	bcc.n	800953a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e007      	b.n	800954a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800953a:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <prvInsertTimerInActiveList+0x80>)
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3304      	adds	r3, #4
 8009542:	4619      	mov	r1, r3
 8009544:	4610      	mov	r0, r2
 8009546:	f7fd fda8 	bl	800709a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800954a:	697b      	ldr	r3, [r7, #20]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	200414b8 	.word	0x200414b8
 8009558:	200414b4 	.word	0x200414b4

0800955c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08e      	sub	sp, #56	@ 0x38
 8009560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009562:	e0ce      	b.n	8009702 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	da19      	bge.n	800959e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800956a:	1d3b      	adds	r3, r7, #4
 800956c:	3304      	adds	r3, #4
 800956e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	61fb      	str	r3, [r7, #28]
}
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	e7fd      	b.n	800958a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009594:	6850      	ldr	r0, [r2, #4]
 8009596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009598:	6892      	ldr	r2, [r2, #8]
 800959a:	4611      	mov	r1, r2
 800959c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f2c0 80ae 	blt.w	8009702 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	3304      	adds	r3, #4
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fd fda8 	bl	800710c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095bc:	463b      	mov	r3, r7
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff ff6a 	bl	8009498 <prvSampleTimeNow>
 80095c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b09      	cmp	r3, #9
 80095ca:	f200 8097 	bhi.w	80096fc <prvProcessReceivedCommands+0x1a0>
 80095ce:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <prvProcessReceivedCommands+0x78>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	080095fd 	.word	0x080095fd
 80095e0:	08009673 	.word	0x08009673
 80095e4:	08009687 	.word	0x08009687
 80095e8:	080096d3 	.word	0x080096d3
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	080095fd 	.word	0x080095fd
 80095f4:	08009673 	.word	0x08009673
 80095f8:	08009687 	.word	0x08009687
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009602:	f043 0301 	orr.w	r3, r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	18d1      	adds	r1, r2, r3
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800961c:	f7ff ff5c 	bl	80094d8 <prvInsertTimerInActiveList>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d06c      	beq.n	8009700 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800962c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d061      	beq.n	8009700 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	441a      	add	r2, r3
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	2100      	movs	r1, #0
 800964c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800964e:	f7ff fe01 	bl	8009254 <xTimerGenericCommand>
 8009652:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d152      	bne.n	8009700 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	61bb      	str	r3, [r7, #24]
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	e7fd      	b.n	800966e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	b2da      	uxtb	r2, r3
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009684:	e03d      	b.n	8009702 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10b      	bne.n	80096be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	617b      	str	r3, [r7, #20]
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	e7fd      	b.n	80096ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	699a      	ldr	r2, [r3, #24]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	18d1      	adds	r1, r2, r3
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096cc:	f7ff ff04 	bl	80094d8 <prvInsertTimerInActiveList>
					break;
 80096d0:	e017      	b.n	8009702 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096d8:	f003 0302 	and.w	r3, r3, #2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80096e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e2:	f000 fbe9 	bl	8009eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096e6:	e00c      	b.n	8009702 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096ee:	f023 0301 	bic.w	r3, r3, #1
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096fa:	e002      	b.n	8009702 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80096fc:	bf00      	nop
 80096fe:	e000      	b.n	8009702 <prvProcessReceivedCommands+0x1a6>
					break;
 8009700:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009702:	4b08      	ldr	r3, [pc, #32]	@ (8009724 <prvProcessReceivedCommands+0x1c8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	1d39      	adds	r1, r7, #4
 8009708:	2200      	movs	r2, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe f90c 	bl	8007928 <xQueueReceive>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	f47f af26 	bne.w	8009564 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	3730      	adds	r7, #48	@ 0x30
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200414bc 	.word	0x200414bc

08009728 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800972e:	e049      	b.n	80097c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009730:	4b2e      	ldr	r3, [pc, #184]	@ (80097ec <prvSwitchTimerLists+0xc4>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973a:	4b2c      	ldr	r3, [pc, #176]	@ (80097ec <prvSwitchTimerLists+0xc4>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7fd fcdf 	bl	800710c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d02f      	beq.n	80097c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4413      	add	r3, r2
 800976c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	429a      	cmp	r2, r3
 8009774:	d90e      	bls.n	8009794 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009782:	4b1a      	ldr	r3, [pc, #104]	@ (80097ec <prvSwitchTimerLists+0xc4>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3304      	adds	r3, #4
 800978a:	4619      	mov	r1, r3
 800978c:	4610      	mov	r0, r2
 800978e:	f7fd fc84 	bl	800709a <vListInsert>
 8009792:	e017      	b.n	80097c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009794:	2300      	movs	r3, #0
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	2100      	movs	r1, #0
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7ff fd58 	bl	8009254 <xTimerGenericCommand>
 80097a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	603b      	str	r3, [r7, #0]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097c4:	4b09      	ldr	r3, [pc, #36]	@ (80097ec <prvSwitchTimerLists+0xc4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1b0      	bne.n	8009730 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097ce:	4b07      	ldr	r3, [pc, #28]	@ (80097ec <prvSwitchTimerLists+0xc4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097d4:	4b06      	ldr	r3, [pc, #24]	@ (80097f0 <prvSwitchTimerLists+0xc8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <prvSwitchTimerLists+0xc4>)
 80097da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097dc:	4a04      	ldr	r2, [pc, #16]	@ (80097f0 <prvSwitchTimerLists+0xc8>)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6013      	str	r3, [r2, #0]
}
 80097e2:	bf00      	nop
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200414b4 	.word	0x200414b4
 80097f0:	200414b8 	.word	0x200414b8

080097f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097fa:	f000 f96d 	bl	8009ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097fe:	4b15      	ldr	r3, [pc, #84]	@ (8009854 <prvCheckForValidListAndQueue+0x60>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d120      	bne.n	8009848 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009806:	4814      	ldr	r0, [pc, #80]	@ (8009858 <prvCheckForValidListAndQueue+0x64>)
 8009808:	f7fd fbf6 	bl	8006ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800980c:	4813      	ldr	r0, [pc, #76]	@ (800985c <prvCheckForValidListAndQueue+0x68>)
 800980e:	f7fd fbf3 	bl	8006ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009812:	4b13      	ldr	r3, [pc, #76]	@ (8009860 <prvCheckForValidListAndQueue+0x6c>)
 8009814:	4a10      	ldr	r2, [pc, #64]	@ (8009858 <prvCheckForValidListAndQueue+0x64>)
 8009816:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009818:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <prvCheckForValidListAndQueue+0x70>)
 800981a:	4a10      	ldr	r2, [pc, #64]	@ (800985c <prvCheckForValidListAndQueue+0x68>)
 800981c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800981e:	2300      	movs	r3, #0
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	4b11      	ldr	r3, [pc, #68]	@ (8009868 <prvCheckForValidListAndQueue+0x74>)
 8009824:	4a11      	ldr	r2, [pc, #68]	@ (800986c <prvCheckForValidListAndQueue+0x78>)
 8009826:	2110      	movs	r1, #16
 8009828:	200a      	movs	r0, #10
 800982a:	f7fd fd03 	bl	8007234 <xQueueGenericCreateStatic>
 800982e:	4603      	mov	r3, r0
 8009830:	4a08      	ldr	r2, [pc, #32]	@ (8009854 <prvCheckForValidListAndQueue+0x60>)
 8009832:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009834:	4b07      	ldr	r3, [pc, #28]	@ (8009854 <prvCheckForValidListAndQueue+0x60>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <prvCheckForValidListAndQueue+0x60>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	490b      	ldr	r1, [pc, #44]	@ (8009870 <prvCheckForValidListAndQueue+0x7c>)
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fc30 	bl	80080a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009848:	f000 f978 	bl	8009b3c <vPortExitCritical>
}
 800984c:	bf00      	nop
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200414bc 	.word	0x200414bc
 8009858:	2004148c 	.word	0x2004148c
 800985c:	200414a0 	.word	0x200414a0
 8009860:	200414b4 	.word	0x200414b4
 8009864:	200414b8 	.word	0x200414b8
 8009868:	20041568 	.word	0x20041568
 800986c:	200414c8 	.word	0x200414c8
 8009870:	0800a308 	.word	0x0800a308

08009874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3b04      	subs	r3, #4
 8009884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800988c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3b04      	subs	r3, #4
 8009892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f023 0201 	bic.w	r2, r3, #1
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3b04      	subs	r3, #4
 80098a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098a4:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <pxPortInitialiseStack+0x64>)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3b14      	subs	r3, #20
 80098ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3b04      	subs	r3, #4
 80098ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f06f 0202 	mvn.w	r2, #2
 80098c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3b20      	subs	r3, #32
 80098c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ca:	68fb      	ldr	r3, [r7, #12]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	080098dd 	.word	0x080098dd

080098dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098e6:	4b13      	ldr	r3, [pc, #76]	@ (8009934 <prvTaskExitError+0x58>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ee:	d00b      	beq.n	8009908 <prvTaskExitError+0x2c>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <prvTaskExitError+0x28>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60bb      	str	r3, [r7, #8]
}
 800991a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800991c:	bf00      	nop
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0fc      	beq.n	800991e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	2004000c 	.word	0x2004000c
	...

08009940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009940:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <pxCurrentTCBConst2>)
 8009942:	6819      	ldr	r1, [r3, #0]
 8009944:	6808      	ldr	r0, [r1, #0]
 8009946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994a:	f380 8809 	msr	PSP, r0
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8811 	msr	BASEPRI, r0
 800995a:	4770      	bx	lr
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst2>:
 8009960:	20040f8c 	.word	0x20040f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009968:	4808      	ldr	r0, [pc, #32]	@ (800998c <prvPortStartFirstTask+0x24>)
 800996a:	6800      	ldr	r0, [r0, #0]
 800996c:	6800      	ldr	r0, [r0, #0]
 800996e:	f380 8808 	msr	MSP, r0
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8814 	msr	CONTROL, r0
 800997a:	b662      	cpsie	i
 800997c:	b661      	cpsie	f
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	df00      	svc	0
 8009988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800998a:	bf00      	nop
 800998c:	e000ed08 	.word	0xe000ed08

08009990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009996:	4b47      	ldr	r3, [pc, #284]	@ (8009ab4 <xPortStartScheduler+0x124>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a47      	ldr	r2, [pc, #284]	@ (8009ab8 <xPortStartScheduler+0x128>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d10b      	bne.n	80099b8 <xPortStartScheduler+0x28>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	613b      	str	r3, [r7, #16]
}
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099b8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab4 <xPortStartScheduler+0x124>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a3f      	ldr	r2, [pc, #252]	@ (8009abc <xPortStartScheduler+0x12c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d10b      	bne.n	80099da <xPortStartScheduler+0x4a>
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	60fb      	str	r3, [r7, #12]
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop
 80099d8:	e7fd      	b.n	80099d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099da:	4b39      	ldr	r3, [pc, #228]	@ (8009ac0 <xPortStartScheduler+0x130>)
 80099dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	22ff      	movs	r2, #255	@ 0xff
 80099ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	4b31      	ldr	r3, [pc, #196]	@ (8009ac4 <xPortStartScheduler+0x134>)
 8009a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a02:	4b31      	ldr	r3, [pc, #196]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a04:	2207      	movs	r2, #7
 8009a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a08:	e009      	b.n	8009a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a1e:	78fb      	ldrb	r3, [r7, #3]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a26:	2b80      	cmp	r3, #128	@ 0x80
 8009a28:	d0ef      	beq.n	8009a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a2a:	4b27      	ldr	r3, [pc, #156]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1c3 0307 	rsb	r3, r3, #7
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d00b      	beq.n	8009a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60bb      	str	r3, [r7, #8]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a60:	4a19      	ldr	r2, [pc, #100]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a6c:	4b17      	ldr	r3, [pc, #92]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a16      	ldr	r2, [pc, #88]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a78:	4b14      	ldr	r3, [pc, #80]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a13      	ldr	r2, [pc, #76]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a84:	f000 f8da 	bl	8009c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a88:	4b11      	ldr	r3, [pc, #68]	@ (8009ad0 <xPortStartScheduler+0x140>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a8e:	f000 f8f9 	bl	8009c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a92:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <xPortStartScheduler+0x144>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a0f      	ldr	r2, [pc, #60]	@ (8009ad4 <xPortStartScheduler+0x144>)
 8009a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a9e:	f7ff ff63 	bl	8009968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009aa2:	f7fe ff2d 	bl	8008900 <vTaskSwitchContext>
	prvTaskExitError();
 8009aa6:	f7ff ff19 	bl	80098dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	e000ed00 	.word	0xe000ed00
 8009ab8:	410fc271 	.word	0x410fc271
 8009abc:	410fc270 	.word	0x410fc270
 8009ac0:	e000e400 	.word	0xe000e400
 8009ac4:	200415b8 	.word	0x200415b8
 8009ac8:	200415bc 	.word	0x200415bc
 8009acc:	e000ed20 	.word	0xe000ed20
 8009ad0:	2004000c 	.word	0x2004000c
 8009ad4:	e000ef34 	.word	0xe000ef34

08009ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
}
 8009af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009af2:	4b10      	ldr	r3, [pc, #64]	@ (8009b34 <vPortEnterCritical+0x5c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	4a0e      	ldr	r2, [pc, #56]	@ (8009b34 <vPortEnterCritical+0x5c>)
 8009afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009afc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b34 <vPortEnterCritical+0x5c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d110      	bne.n	8009b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <vPortEnterCritical+0x60>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00b      	beq.n	8009b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	603b      	str	r3, [r7, #0]
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	e7fd      	b.n	8009b22 <vPortEnterCritical+0x4a>
	}
}
 8009b26:	bf00      	nop
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	2004000c 	.word	0x2004000c
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b42:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10b      	bne.n	8009b62 <vPortExitCritical+0x26>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	607b      	str	r3, [r7, #4]
}
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	e7fd      	b.n	8009b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b62:	4b0a      	ldr	r3, [pc, #40]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	4a08      	ldr	r2, [pc, #32]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b6c:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d105      	bne.n	8009b80 <vPortExitCritical+0x44>
 8009b74:	2300      	movs	r3, #0
 8009b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	f383 8811 	msr	BASEPRI, r3
}
 8009b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	2004000c 	.word	0x2004000c

08009b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b90:	f3ef 8009 	mrs	r0, PSP
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <pxCurrentTCBConst>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f01e 0f10 	tst.w	lr, #16
 8009ba0:	bf08      	it	eq
 8009ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	6010      	str	r0, [r2, #0]
 8009bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009bb4:	f380 8811 	msr	BASEPRI, r0
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f7fe fe9e 	bl	8008900 <vTaskSwitchContext>
 8009bc4:	f04f 0000 	mov.w	r0, #0
 8009bc8:	f380 8811 	msr	BASEPRI, r0
 8009bcc:	bc09      	pop	{r0, r3}
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	6808      	ldr	r0, [r1, #0]
 8009bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd6:	f01e 0f10 	tst.w	lr, #16
 8009bda:	bf08      	it	eq
 8009bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009be0:	f380 8809 	msr	PSP, r0
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst>:
 8009bf0:	20040f8c 	.word	0x20040f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
}
 8009c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c12:	f7fe fdbb 	bl	800878c <xTaskIncrementTick>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c1c:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <xPortSysTickHandler+0x40>)
 8009c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f383 8811 	msr	BASEPRI, r3
}
 8009c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c40:	4b0b      	ldr	r3, [pc, #44]	@ (8009c70 <vPortSetupTimerInterrupt+0x34>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <vPortSetupTimerInterrupt+0x38>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c78 <vPortSetupTimerInterrupt+0x3c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a0a      	ldr	r2, [pc, #40]	@ (8009c7c <vPortSetupTimerInterrupt+0x40>)
 8009c52:	fba2 2303 	umull	r2, r3, r2, r3
 8009c56:	099b      	lsrs	r3, r3, #6
 8009c58:	4a09      	ldr	r2, [pc, #36]	@ (8009c80 <vPortSetupTimerInterrupt+0x44>)
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c5e:	4b04      	ldr	r3, [pc, #16]	@ (8009c70 <vPortSetupTimerInterrupt+0x34>)
 8009c60:	2207      	movs	r2, #7
 8009c62:	601a      	str	r2, [r3, #0]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	e000e010 	.word	0xe000e010
 8009c74:	e000e018 	.word	0xe000e018
 8009c78:	20040000 	.word	0x20040000
 8009c7c:	10624dd3 	.word	0x10624dd3
 8009c80:	e000e014 	.word	0xe000e014

08009c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c94 <vPortEnableVFP+0x10>
 8009c88:	6801      	ldr	r1, [r0, #0]
 8009c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c8e:	6001      	str	r1, [r0, #0]
 8009c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c92:	bf00      	nop
 8009c94:	e000ed88 	.word	0xe000ed88

08009c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d915      	bls.n	8009cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009caa:	4a18      	ldr	r2, [pc, #96]	@ (8009d0c <vPortValidateInterruptPriority+0x74>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cb4:	4b16      	ldr	r3, [pc, #88]	@ (8009d10 <vPortValidateInterruptPriority+0x78>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	7afa      	ldrb	r2, [r7, #11]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d20b      	bcs.n	8009cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d14 <vPortValidateInterruptPriority+0x7c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cde:	4b0e      	ldr	r3, [pc, #56]	@ (8009d18 <vPortValidateInterruptPriority+0x80>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d90b      	bls.n	8009cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	603b      	str	r3, [r7, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	e7fd      	b.n	8009cfa <vPortValidateInterruptPriority+0x62>
	}
 8009cfe:	bf00      	nop
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	e000e3f0 	.word	0xe000e3f0
 8009d10:	200415b8 	.word	0x200415b8
 8009d14:	e000ed0c 	.word	0xe000ed0c
 8009d18:	200415bc 	.word	0x200415bc

08009d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	@ 0x28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d28:	f7fe fc74 	bl	8008614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ea0 <pvPortMalloc+0x184>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d34:	f000 f924 	bl	8009f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ea4 <pvPortMalloc+0x188>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 8095 	bne.w	8009e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01e      	beq.n	8009d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d4c:	2208      	movs	r2, #8
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4413      	add	r3, r2
 8009d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d015      	beq.n	8009d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <pvPortMalloc+0x6e>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	617b      	str	r3, [r7, #20]
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	e7fd      	b.n	8009d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d06f      	beq.n	8009e70 <pvPortMalloc+0x154>
 8009d90:	4b45      	ldr	r3, [pc, #276]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d86a      	bhi.n	8009e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d9a:	4b44      	ldr	r3, [pc, #272]	@ (8009eac <pvPortMalloc+0x190>)
 8009d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d9e:	4b43      	ldr	r3, [pc, #268]	@ (8009eac <pvPortMalloc+0x190>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009da4:	e004      	b.n	8009db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d903      	bls.n	8009dc2 <pvPortMalloc+0xa6>
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f1      	bne.n	8009da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dc2:	4b37      	ldr	r3, [pc, #220]	@ (8009ea0 <pvPortMalloc+0x184>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d051      	beq.n	8009e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2208      	movs	r2, #8
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	1ad2      	subs	r2, r2, r3
 8009de6:	2308      	movs	r3, #8
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d920      	bls.n	8009e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4413      	add	r3, r2
 8009df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <pvPortMalloc+0xfc>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e2a:	69b8      	ldr	r0, [r7, #24]
 8009e2c:	f000 f90a 	bl	800a044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb0 <pvPortMalloc+0x194>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d203      	bcs.n	8009e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a18      	ldr	r2, [pc, #96]	@ (8009eb0 <pvPortMalloc+0x194>)
 8009e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <pvPortMalloc+0x188>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e66:	4b13      	ldr	r3, [pc, #76]	@ (8009eb4 <pvPortMalloc+0x198>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	4a11      	ldr	r2, [pc, #68]	@ (8009eb4 <pvPortMalloc+0x198>)
 8009e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e70:	f7fe fbde 	bl	8008630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <pvPortMalloc+0x17a>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	60fb      	str	r3, [r7, #12]
}
 8009e90:	bf00      	nop
 8009e92:	bf00      	nop
 8009e94:	e7fd      	b.n	8009e92 <pvPortMalloc+0x176>
	return pvReturn;
 8009e96:	69fb      	ldr	r3, [r7, #28]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3728      	adds	r7, #40	@ 0x28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20042180 	.word	0x20042180
 8009ea4:	20042194 	.word	0x20042194
 8009ea8:	20042184 	.word	0x20042184
 8009eac:	20042178 	.word	0x20042178
 8009eb0:	20042188 	.word	0x20042188
 8009eb4:	2004218c 	.word	0x2004218c

08009eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d04f      	beq.n	8009f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009eca:	2308      	movs	r3, #8
 8009ecc:	425b      	negs	r3, r3
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	4b25      	ldr	r3, [pc, #148]	@ (8009f74 <vPortFree+0xbc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <vPortFree+0x46>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60fb      	str	r3, [r7, #12]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00b      	beq.n	8009f1e <vPortFree+0x66>
	__asm volatile
 8009f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	60bb      	str	r3, [r7, #8]
}
 8009f18:	bf00      	nop
 8009f1a:	bf00      	nop
 8009f1c:	e7fd      	b.n	8009f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	4b14      	ldr	r3, [pc, #80]	@ (8009f74 <vPortFree+0xbc>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01e      	beq.n	8009f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11a      	bne.n	8009f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <vPortFree+0xbc>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	43db      	mvns	r3, r3
 8009f3e:	401a      	ands	r2, r3
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f44:	f7fe fb66 	bl	8008614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <vPortFree+0xc0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4413      	add	r3, r2
 8009f52:	4a09      	ldr	r2, [pc, #36]	@ (8009f78 <vPortFree+0xc0>)
 8009f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f56:	6938      	ldr	r0, [r7, #16]
 8009f58:	f000 f874 	bl	800a044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f5c:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <vPortFree+0xc4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	4a06      	ldr	r2, [pc, #24]	@ (8009f7c <vPortFree+0xc4>)
 8009f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f66:	f7fe fb63 	bl	8008630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f6a:	bf00      	nop
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20042194 	.word	0x20042194
 8009f78:	20042184 	.word	0x20042184
 8009f7c:	20042190 	.word	0x20042190

08009f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f86:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f8c:	4b27      	ldr	r3, [pc, #156]	@ (800a02c <prvHeapInit+0xac>)
 8009f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00c      	beq.n	8009fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3307      	adds	r3, #7
 8009f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0307 	bic.w	r3, r3, #7
 8009fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	4a1f      	ldr	r2, [pc, #124]	@ (800a02c <prvHeapInit+0xac>)
 8009fb0:	4413      	add	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fb8:	4a1d      	ldr	r2, [pc, #116]	@ (800a030 <prvHeapInit+0xb0>)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fbe:	4b1c      	ldr	r3, [pc, #112]	@ (800a030 <prvHeapInit+0xb0>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4413      	add	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fcc:	2208      	movs	r2, #8
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0307 	bic.w	r3, r3, #7
 8009fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4a15      	ldr	r2, [pc, #84]	@ (800a034 <prvHeapInit+0xb4>)
 8009fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fe2:	4b14      	ldr	r3, [pc, #80]	@ (800a034 <prvHeapInit+0xb4>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fea:	4b12      	ldr	r3, [pc, #72]	@ (800a034 <prvHeapInit+0xb4>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a000:	4b0c      	ldr	r3, [pc, #48]	@ (800a034 <prvHeapInit+0xb4>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4a0a      	ldr	r2, [pc, #40]	@ (800a038 <prvHeapInit+0xb8>)
 800a00e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4a09      	ldr	r2, [pc, #36]	@ (800a03c <prvHeapInit+0xbc>)
 800a016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a018:	4b09      	ldr	r3, [pc, #36]	@ (800a040 <prvHeapInit+0xc0>)
 800a01a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a01e:	601a      	str	r2, [r3, #0]
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	200415c0 	.word	0x200415c0
 800a030:	20042178 	.word	0x20042178
 800a034:	20042180 	.word	0x20042180
 800a038:	20042188 	.word	0x20042188
 800a03c:	20042184 	.word	0x20042184
 800a040:	20042194 	.word	0x20042194

0800a044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a04c:	4b28      	ldr	r3, [pc, #160]	@ (800a0f0 <prvInsertBlockIntoFreeList+0xac>)
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	e002      	b.n	800a058 <prvInsertBlockIntoFreeList+0x14>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d8f7      	bhi.n	800a052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	4413      	add	r3, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	429a      	cmp	r2, r3
 800a072:	d108      	bne.n	800a086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	441a      	add	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d118      	bne.n	800a0cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4b15      	ldr	r3, [pc, #84]	@ (800a0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d00d      	beq.n	800a0c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	441a      	add	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	e008      	b.n	800a0d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	e003      	b.n	800a0d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d002      	beq.n	800a0e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20042178 	.word	0x20042178
 800a0f4:	20042180 	.word	0x20042180

0800a0f8 <memset>:
 800a0f8:	4402      	add	r2, r0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d100      	bne.n	800a102 <memset+0xa>
 800a100:	4770      	bx	lr
 800a102:	f803 1b01 	strb.w	r1, [r3], #1
 800a106:	e7f9      	b.n	800a0fc <memset+0x4>

0800a108 <_reclaim_reent>:
 800a108:	4b29      	ldr	r3, [pc, #164]	@ (800a1b0 <_reclaim_reent+0xa8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4283      	cmp	r3, r0
 800a10e:	b570      	push	{r4, r5, r6, lr}
 800a110:	4604      	mov	r4, r0
 800a112:	d04b      	beq.n	800a1ac <_reclaim_reent+0xa4>
 800a114:	69c3      	ldr	r3, [r0, #28]
 800a116:	b1ab      	cbz	r3, 800a144 <_reclaim_reent+0x3c>
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	b16b      	cbz	r3, 800a138 <_reclaim_reent+0x30>
 800a11c:	2500      	movs	r5, #0
 800a11e:	69e3      	ldr	r3, [r4, #28]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	5959      	ldr	r1, [r3, r5]
 800a124:	2900      	cmp	r1, #0
 800a126:	d13b      	bne.n	800a1a0 <_reclaim_reent+0x98>
 800a128:	3504      	adds	r5, #4
 800a12a:	2d80      	cmp	r5, #128	@ 0x80
 800a12c:	d1f7      	bne.n	800a11e <_reclaim_reent+0x16>
 800a12e:	69e3      	ldr	r3, [r4, #28]
 800a130:	4620      	mov	r0, r4
 800a132:	68d9      	ldr	r1, [r3, #12]
 800a134:	f000 f872 	bl	800a21c <_free_r>
 800a138:	69e3      	ldr	r3, [r4, #28]
 800a13a:	6819      	ldr	r1, [r3, #0]
 800a13c:	b111      	cbz	r1, 800a144 <_reclaim_reent+0x3c>
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 f86c 	bl	800a21c <_free_r>
 800a144:	6961      	ldr	r1, [r4, #20]
 800a146:	b111      	cbz	r1, 800a14e <_reclaim_reent+0x46>
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 f867 	bl	800a21c <_free_r>
 800a14e:	69e1      	ldr	r1, [r4, #28]
 800a150:	b111      	cbz	r1, 800a158 <_reclaim_reent+0x50>
 800a152:	4620      	mov	r0, r4
 800a154:	f000 f862 	bl	800a21c <_free_r>
 800a158:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a15a:	b111      	cbz	r1, 800a162 <_reclaim_reent+0x5a>
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 f85d 	bl	800a21c <_free_r>
 800a162:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a164:	b111      	cbz	r1, 800a16c <_reclaim_reent+0x64>
 800a166:	4620      	mov	r0, r4
 800a168:	f000 f858 	bl	800a21c <_free_r>
 800a16c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a16e:	b111      	cbz	r1, 800a176 <_reclaim_reent+0x6e>
 800a170:	4620      	mov	r0, r4
 800a172:	f000 f853 	bl	800a21c <_free_r>
 800a176:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a178:	b111      	cbz	r1, 800a180 <_reclaim_reent+0x78>
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 f84e 	bl	800a21c <_free_r>
 800a180:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a182:	b111      	cbz	r1, 800a18a <_reclaim_reent+0x82>
 800a184:	4620      	mov	r0, r4
 800a186:	f000 f849 	bl	800a21c <_free_r>
 800a18a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a18c:	b111      	cbz	r1, 800a194 <_reclaim_reent+0x8c>
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 f844 	bl	800a21c <_free_r>
 800a194:	6a23      	ldr	r3, [r4, #32]
 800a196:	b14b      	cbz	r3, 800a1ac <_reclaim_reent+0xa4>
 800a198:	4620      	mov	r0, r4
 800a19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a19e:	4718      	bx	r3
 800a1a0:	680e      	ldr	r6, [r1, #0]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 f83a 	bl	800a21c <_free_r>
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	e7bb      	b.n	800a124 <_reclaim_reent+0x1c>
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20040010 	.word	0x20040010

0800a1b4 <__libc_init_array>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a1ec <__libc_init_array+0x38>)
 800a1b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a1f0 <__libc_init_array+0x3c>)
 800a1ba:	1b64      	subs	r4, r4, r5
 800a1bc:	10a4      	asrs	r4, r4, #2
 800a1be:	2600      	movs	r6, #0
 800a1c0:	42a6      	cmp	r6, r4
 800a1c2:	d109      	bne.n	800a1d8 <__libc_init_array+0x24>
 800a1c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a1f4 <__libc_init_array+0x40>)
 800a1c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a1f8 <__libc_init_array+0x44>)
 800a1c8:	f000 f87e 	bl	800a2c8 <_init>
 800a1cc:	1b64      	subs	r4, r4, r5
 800a1ce:	10a4      	asrs	r4, r4, #2
 800a1d0:	2600      	movs	r6, #0
 800a1d2:	42a6      	cmp	r6, r4
 800a1d4:	d105      	bne.n	800a1e2 <__libc_init_array+0x2e>
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1dc:	4798      	blx	r3
 800a1de:	3601      	adds	r6, #1
 800a1e0:	e7ee      	b.n	800a1c0 <__libc_init_array+0xc>
 800a1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e6:	4798      	blx	r3
 800a1e8:	3601      	adds	r6, #1
 800a1ea:	e7f2      	b.n	800a1d2 <__libc_init_array+0x1e>
 800a1ec:	0800a3bc 	.word	0x0800a3bc
 800a1f0:	0800a3bc 	.word	0x0800a3bc
 800a1f4:	0800a3bc 	.word	0x0800a3bc
 800a1f8:	0800a3c0 	.word	0x0800a3c0

0800a1fc <__retarget_lock_acquire_recursive>:
 800a1fc:	4770      	bx	lr

0800a1fe <__retarget_lock_release_recursive>:
 800a1fe:	4770      	bx	lr

0800a200 <memcpy>:
 800a200:	440a      	add	r2, r1
 800a202:	4291      	cmp	r1, r2
 800a204:	f100 33ff 	add.w	r3, r0, #4294967295
 800a208:	d100      	bne.n	800a20c <memcpy+0xc>
 800a20a:	4770      	bx	lr
 800a20c:	b510      	push	{r4, lr}
 800a20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a212:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a216:	4291      	cmp	r1, r2
 800a218:	d1f9      	bne.n	800a20e <memcpy+0xe>
 800a21a:	bd10      	pop	{r4, pc}

0800a21c <_free_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4605      	mov	r5, r0
 800a220:	2900      	cmp	r1, #0
 800a222:	d041      	beq.n	800a2a8 <_free_r+0x8c>
 800a224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a228:	1f0c      	subs	r4, r1, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfb8      	it	lt
 800a22e:	18e4      	addlt	r4, r4, r3
 800a230:	f000 f83e 	bl	800a2b0 <__malloc_lock>
 800a234:	4a1d      	ldr	r2, [pc, #116]	@ (800a2ac <_free_r+0x90>)
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	b933      	cbnz	r3, 800a248 <_free_r+0x2c>
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	6014      	str	r4, [r2, #0]
 800a23e:	4628      	mov	r0, r5
 800a240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a244:	f000 b83a 	b.w	800a2bc <__malloc_unlock>
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d908      	bls.n	800a25e <_free_r+0x42>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428b      	cmp	r3, r1
 800a252:	bf01      	itttt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	1809      	addeq	r1, r1, r0
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	e7ed      	b.n	800a23a <_free_r+0x1e>
 800a25e:	461a      	mov	r2, r3
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b10b      	cbz	r3, 800a268 <_free_r+0x4c>
 800a264:	42a3      	cmp	r3, r4
 800a266:	d9fa      	bls.n	800a25e <_free_r+0x42>
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	1850      	adds	r0, r2, r1
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d10b      	bne.n	800a288 <_free_r+0x6c>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	4401      	add	r1, r0
 800a274:	1850      	adds	r0, r2, r1
 800a276:	4283      	cmp	r3, r0
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	d1e0      	bne.n	800a23e <_free_r+0x22>
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	6053      	str	r3, [r2, #4]
 800a282:	4408      	add	r0, r1
 800a284:	6010      	str	r0, [r2, #0]
 800a286:	e7da      	b.n	800a23e <_free_r+0x22>
 800a288:	d902      	bls.n	800a290 <_free_r+0x74>
 800a28a:	230c      	movs	r3, #12
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	e7d6      	b.n	800a23e <_free_r+0x22>
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	1821      	adds	r1, r4, r0
 800a294:	428b      	cmp	r3, r1
 800a296:	bf04      	itt	eq
 800a298:	6819      	ldreq	r1, [r3, #0]
 800a29a:	685b      	ldreq	r3, [r3, #4]
 800a29c:	6063      	str	r3, [r4, #4]
 800a29e:	bf04      	itt	eq
 800a2a0:	1809      	addeq	r1, r1, r0
 800a2a2:	6021      	streq	r1, [r4, #0]
 800a2a4:	6054      	str	r4, [r2, #4]
 800a2a6:	e7ca      	b.n	800a23e <_free_r+0x22>
 800a2a8:	bd38      	pop	{r3, r4, r5, pc}
 800a2aa:	bf00      	nop
 800a2ac:	200422d4 	.word	0x200422d4

0800a2b0 <__malloc_lock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	@ (800a2b8 <__malloc_lock+0x8>)
 800a2b2:	f7ff bfa3 	b.w	800a1fc <__retarget_lock_acquire_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	200422d0 	.word	0x200422d0

0800a2bc <__malloc_unlock>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	@ (800a2c4 <__malloc_unlock+0x8>)
 800a2be:	f7ff bf9e 	b.w	800a1fe <__retarget_lock_release_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	200422d0 	.word	0x200422d0

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
